{
  "version": 3,
  "sources": ["../src/views/list/containers/UserListContainer.tsx", "../src/views/list/components/UserListItem.tsx", "../src/views/list/hooks/useUserListBreadCrumb.ts", "../src/views/list/hooks/useUserListFilterForm.ts", "../src/views/list/queries/UserListQuery.ts"],
  "sourcesContent": ["import {\r\n    Box,\r\n    BreadCrumb,\r\n    Button,\r\n    ControlList,\r\n    List,\r\n    RightSidebar,\r\n    useListFilterState,\r\n    useTranslationRoute,\r\n    useUrlParamsEncode,\r\n    useUrlParamsValue,\r\n} from \"@mzara/component\";\r\nimport { TUser } from \"@mzara/graphql\";\r\nimport _ from \"lodash\";\r\nimport { Link, Outlet } from \"react-router-dom\";\r\nimport { UserListItem } from \"../components/UserListItem\";\r\nimport { useUserListBreadCrumb } from \"../hooks/useUserListBreadCrumb\";\r\nimport { useUserListFilterForm } from \"../hooks/useUserListFilterForm\";\r\nimport { UserListQuery } from \"../queries/UserListQuery\";\r\n\r\nconst UserListContainer = () => {\r\n    const t = useTranslationRoute();\r\n    const urlParams = useUrlParamsValue();\r\n    const encodeUrl = useUrlParamsEncode();\r\n    const breadcrumbItems = useUserListBreadCrumb();\r\n    const filterControl = useUserListFilterForm();\r\n    const { filter, setFilter } = useListFilterState(USER_LIST_ID);\r\n\r\n    return (\r\n        <div className=\"flex w-full h-max justify-center gap-5\">\r\n            <section className=\"sm:py-3 py-1 flex flex-col gap-5 bg-body-background flex-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <h4 className=\"font-semibold\">Utilisateurs</h4>\r\n                    <Link\r\n                        to={t(`recruiting/cv/create?${encodeUrl(urlParams)}`)}\r\n                    >\r\n                        <Button\r\n                            label=\"Ajouter\"\r\n                            startIcon=\"fa-solid fa-plus\"\r\n                            className=\"flex items-center !bg-primary text-white gap-1 button-rounded-full\"\r\n                        />\r\n                    </Link>\r\n                </div>\r\n                <BreadCrumb items={breadcrumbItems.reverse()} />\r\n\r\n                <Box\r\n                    title=\"Liste des utilisateurs\"\r\n                    className=\"box-mb-0 flex flex-col gap-3\"\r\n                    tools={\r\n                        <Button\r\n                            label=\"Ce mois\"\r\n                            endIcon=\"fa-solid fa-caret-down\"\r\n                            className=\"!bg-[#D9D9D9] button-rounded-full text-[#3E3A3A] [&>i]:text-white\"\r\n                        />\r\n                    }\r\n                >\r\n                    <div className=\"publication-list-content flex w-full\">\r\n                        <List\r\n                            search={false}\r\n                            selection={false}\r\n                            id={USER_LIST_ID}\r\n                            GQLRequest={UserListQuery}\r\n                            defaultFilter={{\r\n                                pageSize: 10,\r\n                                page: 0,\r\n                            }}\r\n                            onRenderRow={(row: TUser) => (\r\n                                <UserListItem userItem={row} />\r\n                            )}\r\n                        />\r\n                    </div>\r\n                </Box>\r\n            </section>\r\n\r\n            <RightSidebar>\r\n                <Box\r\n                    title=\"Filter\"\r\n                    icon=\"fa-solid fa-filter\"\r\n                    className=\"h-full\"\r\n                >\r\n                    <ControlList\r\n                        {...filterControl}\r\n                        value={{\r\n                            ...filter?.data,\r\n                        }}\r\n                        onChange={(value) =>\r\n                            setFilter((v: any) => ({\r\n                                ...v,\r\n                                page: 0,\r\n                                data: {\r\n                                    ...v.data,\r\n                                    ...value,\r\n                                },\r\n                            }))\r\n                        }\r\n                    />\r\n                </Box>\r\n            </RightSidebar>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const USER_LIST_ID = \"UserManagement.Users.List\";\r\n\r\nexport default UserListContainer;\r\n", "import { IconButton, useFileUrl, useTranslationRoute } from \"@mzara/component\";\r\nimport { TUser } from \"@mzara/graphql\";\r\nimport { AvatarComponent } from \"avatar-initials\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const UserListItem = ({ userItem }: UserListItemProps) => {\r\n    const t = useTranslationRoute();\r\n    const fileUrl = useFileUrl();\r\n    return (\r\n        <div className=\"flex items-center justify-between w-full pt-2 pb-4 border-b\">\r\n            <div className=\"flex items-start gap-5\">\r\n                <div className=\"w-12 h-12 p-[2px] flex items-start object-cover object-center overflow-hidden rounded-full bg-secondary\">\r\n                    {/* <img src=\"\" className=\"w-full\" alt=\"\" /> */}\r\n                    <AvatarComponent\r\n                        primarySource={\r\n                            userItem?.profilePicture?.id &&\r\n                            fileUrl(userItem?.profilePicture?.id)\r\n                        }\r\n                        initials={\r\n                            userItem?.firstName && userItem?.lastName\r\n                                ? `${(userItem?.firstName?.split(\"\"))[0]}${\r\n                                      (userItem?.lastName?.split(\"\"))[0]\r\n                                  }`\r\n                                : \"NN\"\r\n                        }\r\n                        useGravatar={false}\r\n                        classes=\"rounded-full w-full\"\r\n                    />\r\n                </div>\r\n                <div className=\"flex flex-col gap-2\">\r\n                    <div className=\"flex flex-col\">\r\n                        <h6 className=\"text-lg tracking-wider\">{`${userItem?.firstName} ${userItem?.lastName}`}</h6>\r\n                        <span>{userItem?.email}</span>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-4\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <i className=\"fa-solid fa-user-tie\"></i>\r\n                            <span>{userItem?.job || 'None'}</span>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-1\">\r\n                            <i className=\"fa-solid fa-file-signature\"></i>\r\n                            <div className=\"flex items-center gap-1\">\r\n                                {userItem?.recruitingContracts?.map(\r\n                                    (contract) => (\r\n                                        <span>{contract?.designation}</span>\r\n                                    )\r\n                                ) || 'None'}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Link to={t(`user/list/${userItem.id}/details/about`)}>\r\n                <IconButton icon=\"fa-solid fa-angle-right\" />\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type UserListItemProps = {\r\n    userItem: TUser;\r\n};\r\n", "import { BreadCrumbItemProps } from \"@mzara/component\";\r\n\r\nexport const useUserListBreadCrumb = (): Array<BreadCrumbItemProps> => {\r\n    return [\r\n        {\r\n            label: 'Home'\r\n        },\r\n        {\r\n            label: 'List'\r\n        }\r\n    ]\r\n}", "import { ControlListProps } from \"@mzara/component\";\r\n\r\nexport const useUserListFilterForm = ():ControlListProps => {\r\n    return {\r\n        data: {\r\n            forms: [\r\n                {\r\n                    type: 'text',\r\n                    name: 'firstName_like',\r\n                    label: 'Nom'\r\n                },\r\n                {\r\n                    type: 'text',\r\n                    name: 'lastName_like',\r\n                    label: 'Pr\u00E9noms'\r\n                },\r\n                {\r\n                    type: 'text',\r\n                    name: 'email_like',\r\n                    label: 'Email'\r\n                },\r\n                {\r\n                    type: 'text',\r\n                    name: 'job_like',\r\n                    label: 'Poste'\r\n                }\r\n            ],\r\n            hideFooter: true,\r\n            value: {},\r\n            graphQL: {\r\n                entity: 'users'\r\n            }\r\n        },\r\n        id: 'user-list-filter-form'\r\n    }\r\n}", "import { GraphQLQueryClass } from \"@mzara/component\";\r\nimport { TUser, TUsersResponse } from \"@mzara/graphql\";\r\n\r\nexport class UserListQuery implements GraphQLQueryClass<TUsersResponse, TResponse>{\r\n    public queryKey: string = 'App.Harea.UserManagement.UserListQuery';\r\n    public gql: string = `\r\n        query UserListQuery(\r\n            $pageSize: Float,\r\n            $page: Float,\r\n            $data: JSONObject\r\n        ){\r\n            users(filter: {\r\n                data: $data,\r\n                pageSize: $pageSize,\r\n                page: $page\r\n            }){\r\n                total\r\n                data{\r\n                    id firstName lastName email job recruitingContracts{id designation} profilePicture{id}\r\n                }\r\n            }\r\n        }\r\n    `;\r\n    variables?: any\r\n\r\n    constructor(variables: any){\r\n        this.variables = variables\r\n    }\r\n    mapFn(data: TResponse): TUsersResponse {\r\n        return {\r\n            total: data.users.total,\r\n            data: data.users.data\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport type TResponse = {\r\n    users: {\r\n        total: number,\r\n        data: Array<TUser>\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["useTranslationRoute", "Link", "jsx", "jsxs", "useTranslationRoute", "Link"]
}
