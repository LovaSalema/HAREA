{
  "version": 3,
  "sources": ["../src/views/organisation/hooks/useUserOrganisationEditForm.ts", "../src/views/organisation/hooks/useUserOrganisationOwnerQuery.ts", "../src/views/organisation/queries/UserOrganisationOwnerQuery.ts"],
  "sourcesContent": ["import { ControlListProps, useRuntimeEnv, useTranslations } from \"@mzara/component\";\r\nimport { useMemo } from \"react\";\r\nimport { useUserOrganisationOwnerQuery } from \"./useUserOrganisationOwnerQuery\";\r\n\r\n/**\r\n * This hook only build controlList form, no value is perfomed here\r\n */\r\nexport const useUserOrganisationEditForm = () => {\r\n\r\n    const { data } = useUserOrganisationOwnerQuery(true)\r\n\r\n    const [\r\n        METADATA_TITLE,\r\n        METADATA_DESCRIPTION,\r\n        METADATA_KEY_LABEL,\r\n        METADATA_DESIGNATION_LABEL,\r\n        METADATA_COMMENTS_LABEL,\r\n        ROLES_TITLE,\r\n        ROLES_DESCIPTION,\r\n    ] = useTranslations(i18n);\r\n\r\n    const metadataForm = useMemo((): ControlListProps => {\r\n        return {\r\n            data: {\r\n                // title: METADATA_TITLE,\r\n                // description: METADATA_DESCRIPTION,\r\n                forms: [\r\n                    {\r\n                        type: 'hidden',\r\n                        name: 'id'\r\n                    },\r\n                    {\r\n                        type: 'text',\r\n                        name: 'organisationKey',\r\n                        className: '',\r\n                        label: METADATA_KEY_LABEL\r\n                    },\r\n                    {\r\n                        type: 'text',\r\n                        name: 'designation',\r\n                        className: '',\r\n                        label: METADATA_DESIGNATION_LABEL\r\n                    },\r\n                    {\r\n                        type: 'text',\r\n                        name: 'comment',\r\n                        className: '',\r\n                        label: METADATA_COMMENTS_LABEL\r\n                    },\r\n                ],\r\n                graphQL: {\r\n                    entity: 'userOrganisation'\r\n                }\r\n            },\r\n        }\r\n    }, [])\r\n\r\n    const rolesForm = useMemo((): ControlListProps => {\r\n\r\n        const categories = data.roles.reduce<Array<string>>((all, item) => {\r\n            if (!all.some((item1) => item1 === item.descriptorKey)) {\r\n                all.push(item.descriptorKey)\r\n            }\r\n            return all\r\n        }, [])\r\n\r\n        return {\r\n            data: {\r\n                // title: ROLES_TITLE,\r\n                // description: ROLES_DESCIPTION,\r\n                forms: [\r\n                    {\r\n                        type: 'hidden',\r\n                        name: 'id'\r\n                    },\r\n                    ...categories.reduce((all, category) => {\r\n                        const roles = data.roles.filter((item) => item.descriptorKey === category)\r\n                        all = [\r\n                            ...all,\r\n                            {\r\n                                type: 'checkbox',\r\n                                name: `roles-${category}`,\r\n                                group: 'roles',\r\n                                label: `Generic.de.${category}`,\r\n                                multiple: true,\r\n                                options: roles.map((item) => ({\r\n                                    label: item.translationKey,\r\n                                    value: item.id\r\n                                }))\r\n                            }\r\n                        ]\r\n                        return all\r\n                    }, [])\r\n                ],\r\n                graphQL: {\r\n                    \r\n                }\r\n            },\r\n            onBeforeSaving: (value: Record<string, any>) => {\r\n                return {\r\n                    ...value,\r\n                    ...(Object.keys(value).reduce((all, key) => {\r\n                        if (/^roles/.test(key)) {\r\n                            all[key] = undefined\r\n                        }\r\n                        return all\r\n                    }, {})),\r\n                    roles: Object.keys(value).reduce((all, key) => {\r\n                        if (/^roles/.test(key)) {\r\n                            all = all.concat(\r\n                                value[key].map((item) => ({ id: item }))\r\n                            )\r\n                        }\r\n                        return all\r\n                    }, []),\r\n                }\r\n            }\r\n        }\r\n    }, [data])\r\n\r\n    return useMemo(() => ([\r\n        metadataForm,\r\n        rolesForm\r\n    ]), [metadataForm, rolesForm])\r\n}\r\n\r\nconst i18n = [\r\n\r\n    'Generic.UserOrganisation.form.Metadata.title',\r\n    'Generic.UserOrganisation.form.Metadata.description',\r\n    'Generic.UserOrganisation.form.Metadata.Key.label',\r\n    'Generic.UserOrganisation.form.Metadata.Designation.label',\r\n    'Generic.UserOrganisation.form.Metadata.Comments.label',\r\n\r\n    'Generic.UserOrganisation.form.Roles.title',\r\n    'Generic.UserOrganisation.form.Roles.desciption',\r\n\r\n]\r\n", "import { useGraphqlQuery } from \"@mzara/component\"\r\nimport { TUserOrganisation } from \"@mzara/graphql\"\r\nimport { UserOrganisationOwnerQuery } from \"../queries/UserOrganisationOwnerQuery\"\r\n\r\nexport const useUserOrganisationOwnerQuery = (suspense?: boolean) => {\r\n    return useGraphqlQuery<UserOrganisationOwnerQuery, TUserOrganisation>(new UserOrganisationOwnerQuery(), { suspense })\r\n}\r\n", "import { TUserOrganisation } from \"@mzara/graphql\"\r\nimport { GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class UserOrganisationOwnerQuery implements GraphQLQueryClass<TUserOrganisation, TResponse> {\r\n    public queryKey: string = 'App.Bo.UserOrganisationOwnerQuery.Details'\r\n\r\n    public gql: string = `\r\n        query UserOrganisationOwnerQuery {\r\n            userOrganisation (filter: { data: {organisationKey: \"ISA_SOLUTIONS\"} }) {\r\n                id\r\n                roles { id descriptorKey translationKey }\r\n            }\r\n        }\r\n    `\r\n\r\n    mapFn(data: TResponse): TUserOrganisation {\r\n        return data.userOrganisation\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    userOrganisation: TUserOrganisation\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
