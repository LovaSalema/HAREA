{
  "version": 3,
  "sources": ["../src/views/organisation/views/about/containers/UserOrganisationDetailsAbout.tsx", "../src/views/organisation/views/about/components/UserList.tsx", "../src/views/organisation/views/about/components/UserAddForm.tsx", "../src/views/organisation/views/about/hooks/useUserAffiliateControlList.tsx", "../src/views/organisation/views/about/components/UserListFilter.tsx", "../src/views/organisation/views/about/hooks/useUserFilterMenu.ts"],
  "sourcesContent": ["import { Box, ControlList, List, Metadata, useTranslationRoute, useTranslations } from \"@mzara/component\"\r\nimport { TUser, TUserGroup } from \"@mzara/graphql\"\r\nimport { useMemo } from \"react\"\r\nimport { Link, useParams } from \"react-router-dom\"\r\nimport { useUserOrganisationDetailsQuery } from \"views/organisation/hooks/useUserOrganisationDetailsQuery\"\r\nimport { useUserOrganisationEditForm } from \"views/organisation/hooks/useUserOrganisationEditForm\"\r\nimport { useUserOrganisationRoleFormValue } from \"views/organisation/hooks/useUserOrganisationRoleFormValue\"\r\nimport { UserList } from \"../components/UserList\"\r\n\r\nconst UserOrganisationDetailsAbout = () => {\r\n\r\n    const [\r\n        INFO,\r\n        METADATA_KEY_LABEL,\r\n        METADATA_DESIGNATION_LABEL,\r\n        METADATA_COMMENTS_LABEL,\r\n        ROLES_TITLE,\r\n        USERS,\r\n        GROUP_TITLE\r\n    ] = useTranslations(i18n)\r\n    const { id } = useParams()\r\n    const { data } = useUserOrganisationDetailsQuery(parseInt(id), true)\r\n    const [, rolesForm] = useUserOrganisationEditForm()\r\n    const rolesValue = useUserOrganisationRoleFormValue(parseInt(id))\r\n    const translatedRoute = useTranslationRoute()\r\n\r\n    const groups = useMemo(() => {\r\n        return data.groups\r\n    }, [data])\r\n\r\n\r\n    return (\r\n        <div className=\"flex gap-5\">\r\n            <div className=\"basis-8/12 flex flex-col gap-5\">\r\n                <Box title={INFO} className=\"flex flex-col gap-3 \">\r\n                    <Metadata label={METADATA_KEY_LABEL} value={data.organisationKey} />\r\n                    <Metadata label={METADATA_DESIGNATION_LABEL} value={data.designation} />\r\n                    <Metadata label={METADATA_COMMENTS_LABEL} value={data.comment} />\r\n                </Box>\r\n                <Box className=\"basis-8/12\" title={ROLES_TITLE}>\r\n                    <ControlList\r\n                        {...rolesForm}\r\n                        data={{\r\n                            ...rolesForm.data,\r\n                            hideFooter: true\r\n                        }}\r\n                        value={rolesValue}\r\n                        readonly\r\n                    />\r\n                </Box>\r\n\r\n            </div>\r\n            <div className=\"basis-4/12 flex flex-col gap-5\">\r\n                <Box className=\"box-transparent p-0\" title={GROUP_TITLE}>\r\n                    <List\r\n                        rows={groups}\r\n                        pagination={false}\r\n                        search={false}\r\n                        selection={false}\r\n                        onRenderRow={(row: TUserGroup) => (\r\n                            <div>\r\n                                <h5 className=\"font-bold\"><Link to={translatedRoute(`user/organisation/role/${row.id}`)}>{row.designation}</Link></h5>\r\n                                <ul className=\"flex items-center sm:gap-10 gap-4\">\r\n                                    <li className=\"flex items-center gap-1\">\r\n                                        <i className=\"fa-solid fa-key text-[#6C6868]\"></i>\r\n                                        <span className=\"text-[12px]\">{row.groupKey}</span>\r\n                                    </li>\r\n                                    <li className=\"flex items-center gap-1\">\r\n                                        <i title={USERS} className=\"fa-solid fa-users text-[#6C6868]\"></i>\r\n                                        <span className=\"text-[12px]\">{row.userCount as any}</span>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        )}\r\n                    />\r\n                </Box>\r\n                \r\n                <UserList id={parseInt(id)} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UserOrganisationDetailsAbout\r\n\r\nconst i18n = [\r\n    'std_info',\r\n    'Generic.UserOrganisation.form.Metadata.Key.label',\r\n    'Generic.UserOrganisation.form.Metadata.Designation.label',\r\n    'Generic.UserOrganisation.form.Metadata.Comments.label',\r\n    'Generic.UserOrganisation.form.Roles.title',\r\n    'std_users',\r\n    'Generic.UserOrganisation.form.Group.title',\r\n]\r\n", "import { Box, Chip, List, useTranslationRoute, useTranslations } from \"@mzara/component\"\r\nimport { TUser } from \"@mzara/graphql\"\r\nimport { ReactNode, useMemo, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useUserOrganisationDetailsQuery } from \"views/organisation/hooks/useUserOrganisationDetailsQuery\"\r\nimport { UserAddForm } from \"./UserAddForm\"\r\nimport { UserListFilter } from \"./UserListFilter\"\r\n\r\nexport const UserList = (props: Props) => {\r\n\r\n    const [\r\n        USERS,\r\n    ] = useTranslations(i18n)\r\n    const { data } = useUserOrganisationDetailsQuery(props.id, true)\r\n    const translatedRoute = useTranslationRoute()\r\n    const [openInvitation, setOpenInvitation] = useState(false)\r\n\r\n    const users = useMemo(() => {\r\n        return data.groups.reduce<Array<TUser>>((all, item) => {\r\n            return all.concat(item.users)\r\n        }, []).reduce<Array<TUser>>((all, item) => {\r\n            if (!all.some((item1) => item1.id === item.id)) {\r\n                all.push(item)\r\n            }\r\n            return all\r\n        }, [])\r\n    }, [data])\r\n\r\n    return (\r\n        <Box\r\n            className=\"box-transparent p-0\"\r\n            title={(\r\n                <UserListFilter\r\n                    id={props.id}\r\n                    onAddClick={() => setOpenInvitation(true)}\r\n                />\r\n            )}>\r\n            <List\r\n                rows={users}\r\n                pagination={false}\r\n                search={false}\r\n                selection={false}\r\n                onRenderRow={(row: TUser) => (\r\n                    <div className=\"flex flex-col gap-2\">\r\n                        <h5 className=\"font-bold\"><Link to={translatedRoute(`user/${row.id}`)}>{row.fullName}</Link></h5>\r\n                        <div className=\"flex gap-2\">\r\n                            {\r\n                                row.groups.map((group) => (\r\n                                    <Chip \r\n                                        key={group.id} \r\n                                        url={translatedRoute(`user/organisation/role/${group.id}`)}\r\n                                        label={group.designation} \r\n                                        />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            <UserAddForm open={openInvitation} onDismiss={() => setOpenInvitation(false)} />\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst i18n = [\r\n    'std_users',\r\n]\r\n\r\ntype Props = {\r\n    id: number\r\n}\r\n", "import { ControlList, Dialog, DialogProps } from \"@mzara/component\"\r\nimport { useUserAffiliateControlList } from \"../hooks/useUserAffiliateControlList\"\r\n\r\nexport const UserAddForm = (props: UserAddFormProps) => {\r\n\r\n    const control = useUserAffiliateControlList()\r\n\r\n    const handleSubmit = () => {\r\n        // Todo : affiliate an user\r\n        // Send an email that redirect to signin form\r\n    }\r\n\r\n    return (\r\n        <Dialog {...props}>\r\n            <ControlList\r\n                {...control}\r\n                onSubmit={handleSubmit}\r\n                />\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport type UserAddFormProps = DialogProps & {\r\n    \r\n}\r\n", "import { ControlListProps, useTranslation } from \"@mzara/component\"\r\nimport { useMemo } from \"react\"\r\n\r\nexport const useUserAffiliateControlList = () => {\r\n\r\n    const t = useTranslation()\r\n    return useMemo((): ControlListProps => {\r\n        return {\r\n            data: {\r\n                forms: [\r\n                    {\r\n                        type: 'select',\r\n                        multiple: true,\r\n                        name: 'users',\r\n                        label: t('std_users'),\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }, [])\r\n}\r\n", "import { Button, Dropdown, IconButton, Menu, useTranslations } from \"@mzara/component\"\r\nimport { useState } from \"react\"\r\nimport { useUserFilterMenu } from \"../hooks/useUserFilterMenu\"\r\n\r\nexport const UserListFilter = (props: UserListFilterProps) => {\r\n\r\n    const [\r\n        USERS,\r\n        INVITE\r\n    ] = useTranslations(i18n)\r\n    const [anchorEl, setAnchorEl] = useState<HTMLElement>()\r\n    const menus = useUserFilterMenu(props.id)\r\n\r\n    return (\r\n        <span className=\"flex justify-between\">\r\n            <span>\r\n                {USERS}\r\n            </span>\r\n            {/* <span>\r\n                <Button\r\n                    label={INVITE}\r\n                    startIcon=\"fa-solid fa-paper-plane\"\r\n                    className=\"btn btn-primary\"\r\n                />\r\n                <IconButton\r\n                    icon=\"fa-solid fa-filter\"\r\n                    onClick={(e) => setAnchorEl(e.currentTarget)}\r\n                />\r\n                <Dropdown anchorEl={anchorEl} onClose={() => setAnchorEl(undefined)}>\r\n                    <Menu\r\n                        items={menus}\r\n                        onClick={(menu) => props.onFilterMenuChange?.(menu.id)}\r\n                    />\r\n                </Dropdown>\r\n            </span> */}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport type UserListFilterProps = {\r\n    id: number\r\n    onAddClick?: () => void\r\n    onFilterMenuChange?: (id?: number) => void\r\n}\r\n\r\nconst i18n = [\r\n    'std_users',\r\n    'std_invite'\r\n]\r\n", "import { MenuItemProps, useTranslation } from \"@mzara/component\"\r\nimport { useMemo } from \"react\"\r\nimport { useUserOrganisationDetailsQuery } from \"views/organisation/hooks/useUserOrganisationDetailsQuery\"\r\n\r\nexport const useUserFilterMenu = (id: number) => {\r\n\r\n    const t = useTranslation()\r\n    const { data } = useUserOrganisationDetailsQuery(id, true)\r\n\r\n    return useMemo((): Array<MenuItemProps> => {\r\n        return [\r\n            {\r\n                id: undefined,\r\n                label: t('std_all'),\r\n            },\r\n            ...data.groups.map<MenuItemProps>((item) => ({\r\n                id: item.id,\r\n                label: item.designation\r\n            }))\r\n        ]\r\n    }, [data])\r\n}\r\n"],
  "mappings": "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",
  "names": ["Box", "ControlList", "List", "useTranslationRoute", "useTranslations", "useMemo", "Link", "useTranslations", "useMemo", "useState", "useTranslation", "useMemo", "useTranslation", "useMemo", "jsx", "jsx", "useTranslations", "i18n", "useState", "useMemo", "jsx", "jsxs", "useTranslations", "i18n", "useTranslationRoute", "useMemo", "Box", "ControlList", "List", "Link"]
}
