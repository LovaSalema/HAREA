{
  "version": 3,
  "sources": ["../src/views/details/hooks/useWizardNodeDetailsQuery.ts", "../src/views/details/queries/WizardNodeDetailsQuery.ts"],
  "sourcesContent": ["import { useGraphqlQuery } from \"@mzara/component\"\r\nimport { TWizardNode } from \"@mzara/graphql\"\r\nimport { WizardNodeDetailsQuery } from \"../queries/WizardNodeDetailsQuery\"\r\n\r\nexport const useWizardNodeDetailsQuery = (id?: number, suspense?: boolean) => {\r\n    return useGraphqlQuery<WizardNodeDetailsQuery, TWizardNode>(new WizardNodeDetailsQuery({ id }), { enabled: id !== undefined, suspense })\r\n}\r\n", "import { TWizard, TWizardNode } from \"@mzara/graphql\"\r\nimport { GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class WizardNodeDetailsQuery implements GraphQLQueryClass<TWizardNode, TResponse> {\r\n    public queryKey: string = 'App.Bo.WizardNodeDetailsQuery.Details'\r\n\r\n    public gql: string = `\r\n        query WizardNodeDetailsQuery(\r\n                $id: Float\r\n            ) {\r\n                wizardNode (filter: { id: $id }) {\r\n                id nodeKey title description value comment\r\n            }\r\n        }\r\n    `\r\n\r\n    variables?: any\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponse): TWizardNode {\r\n        return data.wizardNode\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    wizardNode: TWizardNode\r\n}\r\n"],
  "mappings": ";;AAAA,SAAS,uBAAuB;;;ACGzB,IAAM,yBAAN,MAAkF;AAAA,EAerF,YAAY,WAAiB;AAd7B,SAAO,WAAmB;AAE1B,SAAO,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAajB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,MAAM,MAA8B;AAChC,WAAO,KAAK;AAAA,EAChB;AACJ;;;ADrBO,IAAM,4BAA4B,CAAC,IAAa,aAAuB;AAC1E,SAAO,gBAAqD,IAAI,uBAAuB,EAAE,GAAG,CAAC,GAAG,EAAE,SAAS,OAAO,QAAW,SAAS,CAAC;AAC3I;",
  "names": []
}
