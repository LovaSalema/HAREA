{
  "version": 3,
  "sources": ["../src/views/CV-details/views/evaluations/container/EvaluationContainer.tsx", "../src/views/CV-details/views/evaluations/hooks/useEvaluationsQuery.ts", "../src/views/CV-details/views/evaluations/queries/EvaluationsQuery.ts"],
  "sourcesContent": ["import { Button, ControlList, Dialog, useTranslationRoute } from \"@mzara/component\";\r\nimport { useState } from \"react\";\r\nimport { Link, Outlet, useParams } from \"react-router-dom\";\r\nimport { useCuriculumVitaeDetailsQuery } from \"views/CV/hooks/useCuriculumVitaeDetailsQuery\";\r\nimport \"../css/testResult.css\";\r\nimport { useEvaluationQuery } from \"../hooks/useEvaluationsQuery\";\r\n\r\nconst TestResult = () => {\r\n    const { id } = useParams();\r\n    const { data } = useCuriculumVitaeDetailsQuery(parseInt(id), true);\r\n    const { data: evaluationData, invalidateQuery } = useEvaluationQuery(\r\n        data?.email,\r\n        true\r\n    );\r\n    const [open, setOpen] = useState(false);\r\n    const closeDialog = () => {\r\n        invalidateQuery();\r\n        setOpen(false);\r\n    };\r\n    const t = useTranslationRoute()\r\n    return (\r\n        <div className=\"flex flex-col gap-1\">\r\n            <div className=\"flex items-center gap-2 flex-wrap\">\r\n                <Button\r\n                    label=\"Envoyer une \u00E9valuation\"\r\n                    startIcon=\"fa-solid fa-plus\"\r\n                    className=\"button-rounded-full button-bg-primary text-white flex items-center\"\r\n                    onClick={() => setOpen(true)}\r\n                />\r\n                {evaluationData?.data?.map((evaluation) => (\r\n                    <Link to={t(`recruiting/cv/${id}/evaluations/${evaluation?.id}/results`)}>\r\n                    <Button\r\n                        label={evaluation?.evaluationTemplate?.title}\r\n                        startIcon=\"fa-solid fa-file-lines\"\r\n                        className=\"button-rounded-full button-bg-grey flex items-center\"\r\n                    />\r\n                    </Link>\r\n                    \r\n                ))}\r\n            </div>\r\n\r\n            <Outlet />\r\n\r\n            <Dialog open={open} onDismiss={() => closeDialog()}>\r\n                <ControlList\r\n                    nodeKey=\"Harea.CV.Details.SendEvaluationForm\"\r\n                    data={{ forms: [] }}\r\n                    value={{\r\n                        email: data?.email,\r\n                        evaluationTemplate: { id: 2 },\r\n                    }}\r\n                    onSubmited={() => closeDialog()}\r\n                />\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestResult;\r\n", "import { useGraphqlQuery } from \"@mzara/component\"\r\nimport { EvaluationsQuery } from \"../queries/EvaluationsQuery\"\r\n\r\nexport const useEvaluationQuery = (email?: string, suspense?: boolean) => {\r\n    return useGraphqlQuery(new EvaluationsQuery({email}), {enabled: email !== undefined, suspense})\r\n}", "import { GraphQLQueryClass } from \"@mzara/component\";\r\nimport { TEvaluation, TEvaluationsResponse } from \"@mzara/graphql\";\r\n\r\nexport class EvaluationsQuery implements GraphQLQueryClass<TEvaluationsResponse, TResponse>{\r\n    public queryKey: string = 'App.Harea.EvaluationsQuery';\r\n    public gql: string = `\r\n        query EvaluationQuery($email: String){\r\n            evaluations(filter: {data: {email: $email}}){\r\n                total\r\n                data{\r\n                    id evaluationTemplate {id title}\r\n                }\r\n            }\r\n        }\r\n    `;\r\n    variables?: any;\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n    mapFn(data: TResponse):TEvaluationsResponse {\r\n        return {\r\n            total: data.evaluations.total,\r\n            data: data.evaluations.data\r\n        }\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    evaluations: {\r\n        total: number,\r\n        data: Array<TEvaluation>\r\n    }\r\n}"],
  "mappings": ";;;;;;;AAAA,SAAS,QAAQ,aAAa,QAAQ,2BAA2B;AACjE,SAAS,gBAAgB;AACzB,SAAS,MAAM,QAAQ,iBAAiB;;;ACFxC,SAAS,uBAAuB;;;ACGzB,IAAM,mBAAN,MAAoF;AAAA,EAavF,YAAY,WAAiB;AAZ7B,SAAO,WAAmB;AAC1B,SAAO,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYjB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,MAAM,MAAsC;AACxC,WAAO;AAAA,MACH,OAAO,KAAK,YAAY;AAAA,MACxB,MAAM,KAAK,YAAY;AAAA,IAC3B;AAAA,EACJ;AACJ;;;ADtBO,IAAM,qBAAqB,CAAC,OAAgB,aAAuB;AACtE,SAAO,gBAAgB,IAAI,iBAAiB,EAAC,MAAK,CAAC,GAAG,EAAC,SAAS,UAAU,QAAW,SAAQ,CAAC;AAClG;;;ADLA;AAOA,IAAM,aAAa,MAAM;AAPzB;AAQI,QAAM,EAAE,GAAG,IAAI,UAAU;AACzB,QAAM,EAAE,KAAK,IAAI,8BAA8B,SAAS,EAAE,GAAG,IAAI;AACjE,QAAM,EAAE,MAAM,gBAAgB,gBAAgB,IAAI;AAAA,IAC9C,6BAAM;AAAA,IACN;AAAA,EACJ;AACA,QAAM,CAAC,MAAM,OAAO,IAAI,SAAS,KAAK;AACtC,QAAM,cAAc,MAAM;AACtB,oBAAgB;AAChB,YAAQ,KAAK;AAAA,EACjB;AACA,QAAM,IAAI,oBAAoB;AAC9B,SACI,qBAAC;AAAA,IAAI,WAAU;AAAA,IACX;AAAA,2BAAC;AAAA,QAAI,WAAU;AAAA,QACX;AAAA,8BAAC;AAAA,YACG,OAAM;AAAA,YACN,WAAU;AAAA,YACV,WAAU;AAAA,YACV,SAAS,MAAM,QAAQ,IAAI;AAAA,WAC/B;AAAA,WACC,sDAAgB,SAAhB,mBAAsB,IAAI,CAAC,eAAY;AA7BxD,gBAAAA;AA8BoB,uCAAC;AAAA,cAAK,IAAI,EAAE,iBAAiB,kBAAkB,yCAAY,YAAY;AAAA,cACvE,8BAAC;AAAA,gBACG,QAAOA,MAAA,yCAAY,uBAAZ,gBAAAA,IAAgC;AAAA,gBACvC,WAAU;AAAA,gBACV,WAAU;AAAA,eACd;AAAA,aACA;AAAA;AAAA;AAAA,OAGR;AAAA,MAEA,oBAAC,UAAO;AAAA,MAER,oBAAC;AAAA,QAAO;AAAA,QAAY,WAAW,MAAM,YAAY;AAAA,QAC7C,8BAAC;AAAA,UACG,SAAQ;AAAA,UACR,MAAM,EAAE,OAAO,CAAC,EAAE;AAAA,UAClB,OAAO;AAAA,YACH,OAAO,6BAAM;AAAA,YACb,oBAAoB,EAAE,IAAI,EAAE;AAAA,UAChC;AAAA,UACA,YAAY,MAAM,YAAY;AAAA,SAClC;AAAA,OACJ;AAAA;AAAA,GACJ;AAER;AAEA,IAAO,8BAAQ;",
  "names": ["_a"]
}
