{
  "version": 3,
  "sources": ["../src/views/Contract/container/ContractListContainer.tsx", "../src/views/Contract/hooks/useEmployeeContractForm.tsx", "../src/views/Contract/query/EmployeeContactsQuery.tsx", "../src/views/Contract/components/ContractListItem.tsx", "../src/views/Contract/hooks/useContractListFilterForm.tsx"],
  "sourcesContent": ["import { Box, BreadCrumb, Button, ControlList, Dialog, GenericSuspense, List, RightSidebar, useListFilterState, useListGraphqlQuery } from \"@mzara/component\";\r\nimport { TEmployeeContract, TRecruitingAdvert } from \"@mzara/graphql\";\r\nimport React, { useState } from \"react\";\r\nimport { Outlet, useParams } from \"react-router-dom\";\r\nimport { useBreadCrumb } from \"views/publication/hooks/useBreadCrumb\";\r\nimport { useEmployeeContractForm } from \"../hooks/useEmployeeContractForm\";\r\nimport { EmployeeContractsQuery } from \"../query/EmployeeContactsQuery\";\r\nimport { ContractListItem } from \"../components/ContractListItem\";\r\nimport _ from \"lodash\";\r\nimport { useEmployeeContractQuery } from \"../hooks/useEmployeeContractQuery\";\r\nimport { useContractListFilterForm } from \"../hooks/useContractListFilterForm\";\r\n\r\nconst ContractListContainer = ()=> {\r\n    const { invalidateQuery } = useListGraphqlQuery(CONTRACT_LIST_ID);\r\n    const {filter, setFilter} = useListFilterState(CONTRACT_LIST_ID);\r\n    const controlFilter = useContractListFilterForm();\r\n    const breadcrumbItems = useBreadCrumb();\r\n    const [open, setOpen] = useState(false);\r\n    const closeDialog = ()=> {\r\n        setOpen(false);\r\n        invalidateQuery();\r\n    }\r\n    const control = useEmployeeContractForm();\r\n    return (<>\r\n    \r\n    <div className=\"flex w-full h-max justify-center gap-4\">\r\n            <section className=\"sm:py-3 py-1 flex flex-col gap-5 bg-body-background flex-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <h4 className=\"font-semibold\">Contrat</h4>\r\n                    <Button\r\n                        label=\"Ajouter\"\r\n                        startIcon=\"fa-solid fa-plus\"\r\n                        className=\"flex items-center button-bg-primary text-white gap-1 button-rounded-full\"\r\n                        onClick={() => setOpen(true)}\r\n                    />\r\n                </div>\r\n                <BreadCrumb items={breadcrumbItems.reverse()} />\r\n\r\n                <Box\r\n                    title=\"Liste des contrats\"\r\n                    className=\"box-mb-0 flex flex-col gap-2\"\r\n                    tools={\r\n                        <Button\r\n                            label=\"Ce mois\"\r\n                            endIcon=\"fa-solid fa-caret-down\"\r\n                            className=\"!bg-[#D9D9D9] button-rounded-full text-[#3E3A3A] [&>i]:text-white\"\r\n                        />\r\n                    }\r\n                >\r\n                    <div className=\"publication-list-content flex w-full\">\r\n                        <List\r\n                            search={false}\r\n                            selection={false}\r\n                            id={CONTRACT_LIST_ID}\r\n                            GQLRequest={EmployeeContractsQuery}\r\n                            defaultFilter={{\r\n                                pageSize: 10,\r\n                                page: 0\r\n                            }}\r\n                            onRenderRow={(row: TEmployeeContract) => (\r\n                                <ContractListItem\r\n                                    designation={row?.designation}\r\n                                    creationDate={row?.createdAt}\r\n                                    isPublic={row?.isPublic}\r\n                                    id={row?.id}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </div>\r\n                </Box>\r\n            </section>\r\n\r\n            <RightSidebar>\r\n                <Box title='Filter' icon='fa-solid fa-filter' className=\"h-full\">\r\n                    <ControlList \r\n                        {...controlFilter}\r\n                        value={{\r\n                            ...filter?.data,\r\n                            tags: !_.isEmpty(filter?.data?.tags.id_among) ? filter?.data?.tags?.id_among?.map((item) => ({id: item})) : undefined,\r\n                        }}\r\n                        onChange={(value) => setFilter((v: any) => ({\r\n                            ...v,\r\n                            page: 0,\r\n                            data: {\r\n                                ...v.data,\r\n                                ...value,\r\n                                tags: {\r\n                                    id_among: value.tags?.map((item) => item.id)\r\n                                }\r\n                            }\r\n                        }))}\r\n                    />\r\n                </Box>\r\n            </RightSidebar>\r\n\r\n            <Dialog\r\n                open={open}\r\n                title=\"Ajouter un contrat\"\r\n                onDismiss={() => closeDialog()}\r\n            >\r\n                <GenericSuspense>\r\n                    <ControlList\r\n                        {...control}\r\n                        onSubmited={() => closeDialog()}\r\n                        onCancel={() => closeDialog()}\r\n                    />\r\n                </GenericSuspense>\r\n            </Dialog>\r\n        </div>\r\n    </>)\r\n}\r\nexport const CONTRACT_LIST_ID = \"Contract.List\"\r\nexport default ContractListContainer;", "import { ControlListProps } from \"@mzara/component\";\r\n\r\nexport const useEmployeeContractForm = (id?: number):ControlListProps => {\r\n    return {\r\n        data: {\r\n            forms: [\r\n                {\r\n                    type: 'hidden',\r\n                    name : 'id',\r\n                },\r\n                {\r\n                    type: 'text',\r\n                    name: 'designation',\r\n                    label: \"Designation\"\r\n                },\r\n                {\r\n                    type: 'toggle',\r\n                    name: 'isPublic',\r\n                    label: \"Rendre publique\"\r\n                },\r\n                {\r\n                    type: 'lov-select',\r\n                    multiple: true,\r\n                    name: 'tags',\r\n                    label: 'tags',\r\n                    tp: 'EMPOLYEE_CONTRACT_TAGS'\r\n                },\r\n                {\r\n                    type: 'file',\r\n                    name: 'file',\r\n                    label: 'Pi\u00E8ce jointe'\r\n                }\r\n            ],\r\n            value: {},\r\n            next: {\r\n                label: \"Ajouter le Contrat\"\r\n            },\r\n            back: {\r\n                label: \"Annuler contrat\"\r\n            },\r\n            graphQL: {\r\n                entity: 'employeeContract',\r\n                entityId: id,\r\n            }\r\n        },\r\n        id: 'employeeContracts-add-form'\r\n    }\r\n}", "import { GraphQLQueryClass } from \"@mzara/component\";\r\nimport { TEmployeeContract, TEmployeeContractsResponse } from \"@mzara/graphql\";\r\n\r\nexport class EmployeeContractsQuery implements GraphQLQueryClass <TEmployeeContractsResponse, TResponseContract>{\r\n    public queryKey: string= 'App.Harea.EmployeeContractsQuery' \r\n\r\n    public gql : string = `\r\n    query EmployeeContractsQuery(\r\n        $pageSize: Float,\r\n        $page: Float,\r\n        $data: JSONObject\r\n    ) {\r\n        employeeContracts(filter: {\r\n            data: $data,\r\n            pageSize: $pageSize,\r\n            page: $page\r\n        }){\r\n            total\r\n            data {\r\n                id createdAt updatedAt designation userCreator{ id userName} isOwner isPublic isActive \r\n                file{ id name value } tags{id value tp}\r\n            }\r\n        }\r\n    }\r\n    `\r\n\r\n    variables? : any \r\n    constructor (variables? : any)\r\n    {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponseContract) :TEmployeeContractsResponse{\r\n        return {\r\n            total : data.employeeContracts.total,\r\n            data : data.employeeContracts.data\r\n        }\r\n    };\r\n}\r\nexport type TResponseContract = {\r\n    employeeContracts: {\r\n        total: number, \r\n        data : Array<TEmployeeContract>\r\n    }\r\n}", "import { Button, IconButton, useTranslationRoute } from \"@mzara/component\";\r\nimport { TFile, TListOfValue } from \"@mzara/graphql\";\r\nimport { Badge } from \"containers/components/Badge\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport const ContractListItem = ({ designation, creationDate, isPublic, id }: ContractListProps) => {\r\n    const t = useTranslationRoute();\r\n\r\n    return (<>\r\n        <div className=\"publication-list-item w-full flex gap-6 items-center justify-between px-1 pb-4 border-[#6C6868] border-b\">\r\n            <div className=\"flex  flex-col gap-4 items-start\">\r\n                <div className=\"flex justify-center items-center gap-6\">\r\n                    <Link to={t(`recruiting/contract/${id}`)}>\r\n                        <h4 className=\"font-bold text-base sm:text-lg\">\r\n                            {designation}\r\n                        </h4>\r\n                    </Link>\r\n                    {isPublic ? <Badge className=\"h-4 items-center\" label=\"Publique\" color=\"var(--primary)\" /> : ''}\r\n                </div>\r\n                <div className=\"flex gap-2  items-center\">\r\n                    <i className=\"fa-solid fa-clock fa-md text-[#6C6868]\"></i>\r\n                    <p>{moment(+creationDate).format('DD/MM/YYYY')}</p>\r\n                    <IconButton icon='fa-solid fa-file' />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <Button\r\n                label=\"T\u00E9l\u00E9charger\"\r\n                className=\"!rounded-full !bg-primary text-white\"\r\n            />\r\n            {/* {tags.map(tag => (<li style={{backgroundColor: 'blue'}} className={`text-white w-[65px] h-[22px] rounded-xl flex justify-center pt-[1px]`}>{<b className=\"text-xs mt-[2px]\">New</b>}</li>))}  */}\r\n            {/* <li style={{backgroundColor: 'blue'}} className={`text-white w-[65px] h-[22px] rounded-xl flex justify-center pt-[1px]`}>{<b className=\"text-xs mt-[2px]\">New</b>}</li> */}\r\n\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport type ContractListProps = {\r\n    designation?: string,\r\n    icon?: TFile,\r\n    creationDate?: string,\r\n    isPublic: boolean,\r\n    id: number\r\n}", "import { ControlListProps } from \"@mzara/component\"\r\n\r\nexport const useContractListFilterForm = ():ControlListProps => {\r\n    return {\r\n        data: {\r\n            forms: [\r\n                {\r\n                    type: 'text',\r\n                    name: 'designation_like',\r\n                    label: \"Designation\"\r\n                },\r\n                {\r\n                    type: 'lov-select',\r\n                    multiple: true,\r\n                    name: 'tags',\r\n                    label: 'tags',\r\n                    tp: 'EMPOLYEE_CONTRACT_TAGS'\r\n                },\r\n            ],\r\n            value: {},\r\n            hideFooter: true,\r\n            graphQL: {\r\n                entity: 'employeeContract',\r\n            }\r\n        },\r\n        id: 'employeeContract-filter-form'\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["Button", "Fragment", "jsx", "jsxs", "Button", "_a"]
}
