{
  "version": 3,
  "sources": ["../src/views/template/containers/TemplateContainer.tsx", "../src/views/template/components/EvaluationTemplateListItem.tsx", "../src/views/template/hooks/useTemplateBreadCrumb.ts", "../src/views/template/queries/EvaluationTemplateListQuery.ts"],
  "sourcesContent": ["import { Box, BreadCrumb, Button, GenericSuspense, List, RightSidebar, useTranslationRoute, useUrlParamsEncode, useUrlParamsValue } from \"@mzara/component\";\r\nimport { TEvaluationTemplate } from \"@mzara/graphql\";\r\nimport { Link, Outlet } from \"react-router-dom\";\r\nimport { EvaluationTemplateListItem } from \"../components/EvaluationTemplateListItem\";\r\nimport { useTemplateBreadCrumb } from \"../hooks/useTemplateBreadCrumb\";\r\nimport { EvaluationTemplateListQuery } from \"../queries/EvaluationTemplateListQuery\";\r\n\r\nconst TemplateContainer = () => {\r\n    const breadCrumbItems = useTemplateBreadCrumb()\r\n    const urlParams = useUrlParamsValue()\r\n    const encodeUrl = useUrlParamsEncode()\r\n    const t = useTranslationRoute()\r\n    return (\r\n        <div className=\"flex h-max justify-center gap-5 w-full\">\r\n            <section className=\"sm:py-3 py-1 flex flex-col gap-5 box-body-background flex-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <h4 className=\"font-semibold\">Template</h4>\r\n                    <Link to={t(`recruiting/template/create?${encodeUrl(urlParams)}`)}>\r\n                        <Button label=\"Ajouter\" startIcon=\"fa-solid fa-plus\" className=\"button-bg-primary flex items-center gap-1 button-rounded-full text-white\" />\r\n                    </Link>\r\n                </div>\r\n                <BreadCrumb items={breadCrumbItems.reverse()} />\r\n\r\n                <Box title='Liste des templates'>\r\n                    <List \r\n                        search={false}\r\n                        selection={false}\r\n                        id={EVALUATION_TEMPLATE_LIST}\r\n                        GQLRequest={EvaluationTemplateListQuery}\r\n                        defaultFilter={{\r\n                            pageSize: 10,\r\n                            page: 0\r\n                        }}\r\n                        onRenderRow={(row: TEvaluationTemplate, index) => (\r\n                            <EvaluationTemplateListItem template={row} key={index} />\r\n                        )}\r\n                    />\r\n                </Box>\r\n            </section>\r\n\r\n            <RightSidebar />\r\n\r\n            <GenericSuspense>\r\n                <Outlet />\r\n            </GenericSuspense>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const EVALUATION_TEMPLATE_LIST = 'Evaluation.Template.List'\r\n\r\nexport default TemplateContainer;\r\n", "import {\r\n    Chip,\r\n    IconButton,\r\n    Tooltip,\r\n    useTranslationRoute,\r\n} from \"@mzara/component\";\r\nimport { TEvaluationTemplate } from \"@mzara/graphql\";\r\nimport { Badge } from \"containers/components/Badge\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const EvaluationTemplateListItem = ({\r\n    template,\r\n}: EvaluationTemplateListItemProps) => {\r\n    const t = useTranslationRoute();\r\n    return (\r\n        <div className=\"flex justify-between items-center py-3 pb-5 border-b w-full\">\r\n            <div className=\"flex flex-col gap-3 \">\r\n                <div className=\"flex flex-col\">\r\n                    <div className=\"flex items-center gap-5\">\r\n                        <Link\r\n                            to={t(`recruiting/template/${template.id}/about`)}\r\n                        >\r\n                            <h4 className=\"font-bold sm:text-lg text-base\">\r\n                                {template?.title}\r\n                            </h4>\r\n                        </Link>\r\n\r\n                        {template?.isPublic && (\r\n                            <Badge label=\"Public\" color=\"var(--primary)\" />\r\n                        )}\r\n                        <div className=\"text-xs rounded-full px-2 py-1 bg-[#ECECEC]\">\r\n                            <Tooltip\r\n                                text=\"Nombre d'utlisations\"\r\n                                trigger=\"hover\"\r\n                                placement=\"bottom-end\"\r\n                            >\r\n                                <div className=\"flex items-center gap-2\">\r\n                                    <i className=\"fa-solid fa-users\"></i>\r\n                                    <span>{template?.evaluations?.length}</span>\r\n                                </div>\r\n                            </Tooltip>\r\n                        </div>\r\n                    </div>\r\n                    <span className=\"text-sm\">{template?.description}</span>\r\n                </div>\r\n                {!_.isEmpty(template?.tags) && (\r\n                    <div className=\"flex items-center gap-3\">\r\n                        {template?.tags?.map((tag) => (\r\n                            <Chip\r\n                                label={tag?.value}\r\n                                color={tag?.color}\r\n                                className=\"px-2 text-xs rounded-full\"\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Link to={t(`recruiting/template/${template.id}/about`)}>\r\n                <IconButton icon=\"fa-solid fa-angle-right\" />\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type EvaluationTemplateListItemProps = {\r\n    template: TEvaluationTemplate;\r\n};\r\n", "import { BreadCrumbItemProps } from \"@mzara/component\";\r\n\r\nexport const useTemplateBreadCrumb = (): Array<BreadCrumbItemProps> => {\r\n    return [\r\n        {\r\n            label: 'Home'\r\n        },\r\n        {\r\n            label: 'Evaluation'\r\n        },\r\n        {\r\n            label: 'Template'\r\n        }\r\n    ]\r\n}", "import { GraphQLQueryClass } from \"@mzara/component\";\r\nimport { TEvaluationTemplate, TEvaluationTemplatesResponse } from \"@mzara/graphql\";\r\n\r\nexport class EvaluationTemplateListQuery implements GraphQLQueryClass<TEvaluationTemplatesResponse, TResponse> {\r\n    public queryKey: string = 'App.Harea.Evalutation.EvalutionTemplateListQuery';\r\n    public gql: string = `\r\n        query EvaluationTemplateListQuery(\r\n            $pageSize: Float,\r\n            $page: Float,\r\n            $data: JSONObject\r\n        ){\r\n            evaluationTemplates(filter: {\r\n                data: $data,\r\n                pageSize: $pageSize,\r\n                page: $page\r\n            }) {\r\n                total\r\n                data {\r\n                    id title description isPublic tags{id value color} evaluations{id}\r\n                }\r\n            }\r\n        }\r\n    `;\r\n\r\n    variables?: any;\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n    mapFn(data: TResponse): TEvaluationTemplatesResponse{\r\n        return {\r\n            total: data.evaluationTemplates.total,\r\n            data: data.evaluationTemplates.data\r\n        }\r\n    };\r\n}\r\n\r\nexport type TResponse = {\r\n    evaluationTemplates: {\r\n        total: number,\r\n        data: Array<TEvaluationTemplate>\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["useTranslationRoute", "Link", "jsx", "jsxs", "useTranslationRoute", "Link"]
}
