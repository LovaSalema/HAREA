{
  "version": 3,
  "sources": ["../src/views/CV/hooks/useStateCvItems.tsx", "../src/views/CV/hooks/useDescriptorsCvStateQuery.tsx", "../src/views/CV/query/DescriptorsCvStateQuery.tsx"],
  "sourcesContent": ["import { MenuItemProps } from \"@mzara/component\"\r\nimport { useMemo,useState } from \"react\"\r\nimport { useDescriptorsCvStateQuery } from \"./useDescriptorsCvStateQuery\";\r\n\r\nexport const useStateCvItems = () => {\r\n    const {data}= useDescriptorsCvStateQuery('RECRUITING_CV_STATE', true);   \r\n    \r\n    return useMemo((): Array<MenuItemProps> => {\r\n        const CvState= [...data.descriptors.data, \r\n            data.descriptors.data[0].label='Nouveau', \r\n            data.descriptors.data[1].label='En cours de test', \r\n            data.descriptors.data[2].label='Entretient',\r\n            data.descriptors.data[3].label='R\u00E9jet\u00E9'\r\n        ];\r\n        return [CvState[0], CvState[1],CvState[2], CvState[3]];\r\n    }, [])\r\n}\r\n\r\n\r\n\r\n", "import { useGraphqlQuery } from \"@mzara/component\";\r\nimport { DescriptorsCvStateQuery } from \"../query/DescriptorsCvStateQuery\";\r\n\r\nexport const useDescriptorsCvStateQuery = (tp?: string,  suspense?: boolean ) => {\r\n    return useGraphqlQuery(new DescriptorsCvStateQuery ({tp}), {enabled : tp !==undefined, suspense})\r\n}", "import { GraphQLQueryClass } from \"@mzara/component\";\r\nimport { TDescriptor, TRecruitingCuriculumVitae } from \"@mzara/graphql\";\r\n\r\nexport class DescriptorsCvStateQuery implements GraphQLQueryClass <TDescriptor, TDescriptorResponse>{\r\n    public queryKey: string = 'App.Harea.RecruitingCuriculumVitaeDetailsQuery.DescriptorCvState'\r\n    public gql: string = `\r\n    query descriptorsCvState ($tp: String){\r\n        descriptors (filter:{data:{tp: $tp}}){total data{\r\n          id value descriptorKey}}\r\n        }\r\n `\r\n variables?: any\r\nconstructor(variables?: any){\r\n    this.variables= variables\r\n}\r\nmapFn(data: TDescriptorResponse ) : TDescriptor {\r\n    return data.descriptor\r\n}\r\n\r\n}\r\nexport type TDescriptorResponse = {\r\n    descriptor : TDescriptor\r\n}"],
  "mappings": ";;AACA,SAAS,eAAwB;;;ACDjC,SAAS,uBAAuB;;;ACGzB,IAAM,0BAAN,MAA6F;AAAA,EASpG,YAAY,WAAgB;AARxB,SAAO,WAAmB;AAC1B,SAAO,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrB,SAAK,YAAW;AAAA,EACpB;AAAA,EACA,MAAM,MAA0C;AAC5C,WAAO,KAAK;AAAA,EAChB;AAEA;;;ADhBO,IAAM,6BAA6B,CAAC,IAAc,aAAwB;AAC7E,SAAO,gBAAgB,IAAI,wBAAyB,EAAC,GAAE,CAAC,GAAG,EAAC,SAAU,OAAM,QAAW,SAAQ,CAAC;AACpG;;;ADDO,IAAM,kBAAkB,MAAM;AACjC,QAAM,EAAC,KAAI,IAAG,2BAA2B,uBAAuB,IAAI;AAEpE,SAAO,QAAQ,MAA4B;AACvC,UAAM,UAAS;AAAA,MAAC,GAAG,KAAK,YAAY;AAAA,MAChC,KAAK,YAAY,KAAK,GAAG,QAAM;AAAA,MAC/B,KAAK,YAAY,KAAK,GAAG,QAAM;AAAA,MAC/B,KAAK,YAAY,KAAK,GAAG,QAAM;AAAA,MAC/B,KAAK,YAAY,KAAK,GAAG,QAAM;AAAA,IACnC;AACA,WAAO,CAAC,QAAQ,IAAI,QAAQ,IAAG,QAAQ,IAAI,QAAQ,EAAE;AAAA,EACzD,GAAG,CAAC,CAAC;AACT;",
  "names": []
}
