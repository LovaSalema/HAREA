{
  "version": 3,
  "sources": ["../src/hooks/useWizardDetailsQuery.ts", "../src/queries/WizardDetailsQuery.ts"],
  "sourcesContent": ["import { useGraphqlQuery } from \"@mzara/component\"\r\nimport { TWizard } from \"@mzara/graphql\"\r\nimport { WizardDetailsQuery } from \"../queries/WizardDetailsQuery\"\r\n\r\nexport const useWizardDetailsQuery = (id?: number, suspense?: boolean) => {\r\n    return useGraphqlQuery<WizardDetailsQuery, TWizard>(new WizardDetailsQuery({ id }), { enabled: id !== undefined, suspense })\r\n}\r\n", "import { TWizard } from \"@mzara/graphql\"\r\nimport { GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class WizardDetailsQuery implements GraphQLQueryClass<TWizard, TResponse> {\r\n    public queryKey: string = 'App.Bo.WizardDetailsQuery.Details'\r\n\r\n    public gql: string = `\r\n        query WizardDetailsQuery(\r\n                $id: Float\r\n            ) {\r\n            wizard (filter: { id: $id }) {\r\n                id wizardKey type title value comment\r\n                tags { id value }\r\n            }\r\n        }\r\n    `\r\n\r\n    variables?: any\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponse): TWizard {\r\n        return data.wizard\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    wizard: TWizard\r\n}\r\n"],
  "mappings": ";;AAAA,SAAS,uBAAuB;;;ACGzB,IAAM,qBAAN,MAA0E;AAAA,EAgB7E,YAAY,WAAiB;AAf7B,SAAO,WAAmB;AAE1B,SAAO,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcjB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,MAAM,MAA0B;AAC5B,WAAO,KAAK;AAAA,EAChB;AACJ;;;ADtBO,IAAM,wBAAwB,CAAC,IAAa,aAAuB;AACtE,SAAO,gBAA6C,IAAI,mBAAmB,EAAE,GAAG,CAAC,GAAG,EAAE,SAAS,OAAO,QAAW,SAAS,CAAC;AAC/H;",
  "names": []
}
