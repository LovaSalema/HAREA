{
  "version": 3,
  "sources": ["../src/hooks/useWizardQuery.ts", "../src/queries/WizardQuery.ts", "../src/components/WizardFlow.tsx", "../src/components/WizardSequential.tsx", "../src/components/Wizard.tsx"],
  "sourcesContent": ["import { useGraphqlQuery } from \"@mzara/component\"\r\nimport { TWizard } from \"@mzara/graphql\"\r\nimport { WizardQuery } from \"queries/WizardQuery\"\r\n\r\nexport const useWizardQuery = (wizardKey?: string, suspense?: boolean) => {\r\n    return useGraphqlQuery<WizardQuery, TWizard>(new WizardQuery({ wizardKey }), { enabled: wizardKey !== undefined, suspense })\r\n}\r\n", "import { TWizard } from \"@mzara/graphql\"\r\nimport { GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class WizardQuery implements GraphQLQueryClass<TWizard, TResponse> {\r\n    public queryKey: string = 'App.Bo.WizardQuery.Details'\r\n\r\n    public gql: string = `\r\n        query WizardQuery(\r\n                $wizardKey: String!\r\n            ) {\r\n            wizard (filter: { data: { wizardKey_equals: $wizardKey } }) {\r\n                id type value\r\n            }\r\n        }\r\n    `\r\n\r\n    variables?: any\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponse): TWizard {\r\n        return data.wizard\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    wizard: TWizard\r\n}\r\n", "\r\nexport const WizardFlow = (props: WizardFlowProps) => {\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport type WizardFlowProps = {\r\n    id: number\r\n    onWizardFinished?: (value: any) => void\r\n}\r\n", "import { Box, ControlList, MainLogo, Menu, MenuItemProps, useControlListResultMapping, useTranslation } from \"@mzara/component\"\r\nimport { useWizardNodesMetadataQuery } from \"hooks/useWizardNodesMetadataQuery\"\r\nimport { useWizardNodeValueQuery } from \"hooks/useWizardNodeValueQuery\"\r\nimport _ from \"lodash\"\r\nimport { useCallback, useMemo, useState } from \"react\"\r\nimport { useWizardSequentialDetailsValue } from \"view/designer/hooks/useWizardSequentialDetailsValue\"\r\n\r\nexport const WizardSequential = ({ id, wizardId, defaultValue, layout, ...props }: WizardSequentialProps) => {\r\n\r\n    const t = useTranslation()\r\n    const [value, setValue] = useState<Array<Record<string, any>>>(defaultValue || [])\r\n    const [index, setIndex] = useState(0)\r\n    const nodeIds = useWizardSequentialDetailsValue(wizardId, true)\r\n    const active = useMemo(() => nodeIds[index], [index])\r\n    const { data: wizards } = useWizardNodesMetadataQuery(nodeIds, true)\r\n    const { data: wizardNodeControl, isLoading: isWizardNodeLoading } = useWizardNodeValueQuery(active)\r\n    const mapResult = useControlListResultMapping(wizardNodeControl?.data?.resultMapping)\r\n\r\n    const isCreation = useMemo(() => layout === 'CREATION', [layout])\r\n\r\n    const handleSubmited = (_value: Record<string, any>) => {\r\n        if (isCreation) {\r\n            const nextVal = _.clone(value)\r\n            nextVal[index] = _value\r\n            nextVal[index + 1] = mapResult(_value)\r\n            setValue((v) => nextVal)\r\n            if (index === nodeIds.length - 1) {\r\n                props.onWizardFinished?.(nextVal)\r\n                return;\r\n            }\r\n            setIndex((v) => v + 1)\r\n        }\r\n    }\r\n\r\n    const handleCancelClick = (value?: Record<string, any>) => {\r\n        if (isCreation) {\r\n            setValue((v) => {\r\n                const val = _.clone(v)\r\n                val[index] = value\r\n                return val\r\n            })\r\n            setIndex((v) => v - 1)\r\n        }\r\n    }\r\n\r\n    const menus = useMemo((): Array<MenuItemProps> => {\r\n        return (wizards || [])?.map((item) => ({\r\n            label: t(item.valueTitle as any),\r\n            value: item.id\r\n        }))\r\n    }, [wizards, t])\r\n\r\n    const handleMenuClick = useCallback((item: MenuItemProps) => {\r\n        if (!isCreation) {\r\n            const index = menus.findIndex((item1) => item1.value === item.value)\r\n            setIndex(index)\r\n        }\r\n    }, [isCreation, menus])\r\n\r\n    const nextDefaultValue = useMemo(() => {\r\n        return value?.[index]\r\n    }, [value, index])\r\n\r\n    return (\r\n        <div className={`flex ${layout === 'CREATION' ? 'flex-col' : 'flex-row'} gap-5`}>\r\n            <div>\r\n                <Box className=\"p-0 w-60\">\r\n                    <Menu\r\n                        type={layout === 'CREATION' ? 'HORIZONTAL' : 'VERTICAL'}\r\n                        items={menus}\r\n                        activeFn={(menu) => menu.value === active}\r\n                        onClick={handleMenuClick}\r\n                    />\r\n                </Box>\r\n            </div>\r\n            {\r\n                isWizardNodeLoading &&\r\n                <MainLogo />\r\n            }\r\n            {\r\n                !isWizardNodeLoading &&\r\n                <Box className=\"flex-1\">\r\n                    <ControlList\r\n                        key={`step-${index}`}\r\n                        {...wizardNodeControl}\r\n                        data={{\r\n                            hideBack: true,\r\n                            ...wizardNodeControl.data,\r\n                            graphQL: {\r\n                                ...wizardNodeControl.data.graphQL,\r\n                                entityId: id\r\n                            },\r\n                        }}\r\n                        defaultValue={nextDefaultValue}\r\n                        onSubmited={handleSubmited}\r\n                        onCancel={handleCancelClick}\r\n                    />\r\n                </Box>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type WizardSequentialProps = {\r\n    wizardId?: number\r\n    id: number\r\n    index?: number\r\n    layout?: 'CREATION' | 'PARAMS'\r\n    defaultValue?: Array<Record<string, any>>\r\n    onWizardFinished?: (value: any) => void\r\n}\r\n", "import { useWizardQuery } from \"hooks/useWizardQuery\"\r\nimport { WizardFlow } from \"./WizardFlow\"\r\nimport { WizardSequential, WizardSequentialProps } from \"./WizardSequential\"\r\n\r\nexport const Wizard = (props: WizardProps) => {\r\n\r\n    const { data: wizard } = useWizardQuery(props.wizardKey, true)\r\n    return (\r\n        <>\r\n            {\r\n                wizard.type === 'SEQUENTIAL' &&\r\n                <WizardSequential {...props} wizardId={wizard.id} />\r\n            }\r\n\r\n            {\r\n                wizard.type === 'FLOW' &&\r\n                <WizardFlow id={wizard.id} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport type WizardProps = Omit<WizardSequentialProps, 'wizardId'> & {\r\n    wizardKey?: string\r\n}\r\n"],
  "mappings": "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",
  "names": ["jsx", "_a", "value", "index", "Fragment", "jsx", "jsxs"]
}
