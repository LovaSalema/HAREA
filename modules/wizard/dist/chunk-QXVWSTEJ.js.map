{
  "version": 3,
  "sources": ["../src/containers/Wizard.tsx", "../src/components/WizardFilter.tsx", "../src/hooks/useWizardListFilter.ts", "../src/hooks/useWizardListSort.ts", "../src/hooks/useWizardBreadCrumb.ts", "../src/hooks/useWizardListMenu.ts", "../src/queries/WizardsQuery.ts"],
  "sourcesContent": ["import { BreadCrumb, Button, List, useCdnFlagUrl, DateSpan, useUrlParamsValue, useUrlParamsEncode, MenuItemProps, Dialog, useGraphqlDelete, useListGraphqlQuery, RightSidebar, GenericSuspense, useTranslations, useTranslation, useTranslationRoute, Chip } from \"@mzara/component\"\r\nimport { Link, Outlet } from \"react-router-dom\"\r\nimport { WizardFilter } from \"../components/WizardFilter\"\r\nimport { useWizardListSort } from \"../hooks/useWizardListSort\"\r\nimport { useWizardBreadCrumb } from \"../hooks/useWizardBreadCrumb\"\r\nimport { useWizardListMenu } from \"../hooks/useWizardListMenu\"\r\nimport { WizardsQuery } from \"../queries/WizardsQuery\"\r\nimport { TWizard } from \"@mzara/graphql\"\r\nimport { useState } from \"react\"\r\n\r\nconst Wizard = () => {\r\n\r\n    const breadCrumb = useWizardBreadCrumb()\r\n    const menus = useWizardListMenu()\r\n    const [\r\n        ADD,\r\n        CREATED_AT,\r\n        UPDATED_AT,\r\n        CONFIRMATION,\r\n        OK,\r\n        CANCEL,\r\n        WIZARD,\r\n        TYPE\r\n    ] = useTranslations(i18n)\r\n    const t = useTranslation()\r\n    const cdn = useCdnFlagUrl()\r\n    const sortItems = useWizardListSort()\r\n    const translatedRoute = useTranslationRoute()\r\n    const urlParams = useUrlParamsValue()\r\n    const encodeUrl = useUrlParamsEncode()\r\n    const deleteMutation = useGraphqlDelete('wizard')\r\n    const [deleteItems, setDeleteItems] = useState<Array<number>>([])\r\n    const { invalidateQuery } = useListGraphqlQuery(WIZARD_LIST_ID)\r\n\r\n    const handleMenuClick = (row: TWizard, menu: MenuItemProps) => {\r\n        if (menu.ke === 'delete') {\r\n            setDeleteItems([row.id])\r\n        }\r\n    }\r\n\r\n    const handleDeleteConfirmed = () => {\r\n        deleteMutation.mutate({\r\n            ids: deleteItems\r\n        }, {\r\n            onSuccess: () => {\r\n                invalidateQuery()\r\n                setDeleteItems([])\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-row w-full\">\r\n            <div className=\"flex flex-col gap-5 flex-1\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <h4 className=\"font-semibold\">{WIZARD}</h4>\r\n                    <Link to={translatedRoute(`wizard/create?${encodeUrl(urlParams)}`)}>\r\n                        <Button\r\n                            startIcon=\"fa-solid fa-plus\"\r\n                            className='btn btn-primary'\r\n                            label={ADD}\r\n                        />\r\n                    </Link>\r\n                </div>\r\n                \r\n                <BreadCrumb items={breadCrumb.reverse()} />\r\n\r\n                <div className=\"flex w-full\">\r\n                    <List\r\n                        id={WIZARD_LIST_ID}\r\n                        GQLRequest={WizardsQuery}\r\n                        menus={menus}\r\n                        sort={{ items: sortItems }}\r\n                        defaultFilter={{\r\n                            pageSize: 50,\r\n                            page: 0,\r\n                            sort: [{ sort: 'DESC', value: 'updatedAt' }]\r\n                        }}\r\n                        onMenuClick={handleMenuClick}\r\n                        separator\r\n                        onRenderRow={(row: TWizard) => (\r\n                            <div className=\"flex flex-col gap-2\">\r\n                                <p className=\"flex gap-2\">\r\n                                    <Link to={translatedRoute(`wizard/${row.id}?${encodeUrl(urlParams)}`)}>\r\n                                        <b>{row.title}</b>\r\n                                    </Link>\r\n                                </p>\r\n                                <ul className=\"flex items-center sm:gap-10 gap-4\">\r\n                                    <li className=\"flex items-center gap-1\">\r\n                                        <i className=\"fa-solid fa-key text-[#6C6868]\"></i>\r\n                                        <span className=\"text-[12px]\">{row.wizardKey}</span>\r\n                                    </li>\r\n                                    <li className=\"flex items-center gap-1\">\r\n                                        <i title={UPDATED_AT} className=\"fa-solid fa-clock text-[#6C6868]\"></i>\r\n                                        <span className=\"text-[12px]\"><DateSpan value={row.updatedAt!} /></span>\r\n                                    </li>\r\n                                    <li className=\"flex items-center gap-1\">\r\n                                        <i title={TYPE} className={`fa-solid ${row.type === 'SEQUENTIAL' ? 'fa-layer-group' : 'fa-code-branch'} text-[#6C6868]`}></i>\r\n                                        <span className=\"text-[12px]\">{t(`Bo.WizardNode.form.type.${row.type}.label`)}</span>\r\n                                    </li>\r\n                                </ul>\r\n                                <div className=\"flex gap-2 w-full\">\r\n                                    {\r\n                                        row.tags?.map((item, index) => (<Chip key={index} label={item.value} color={item.color} />))\r\n                                    }\r\n                                </div>\r\n\r\n                            </div>\r\n                        )}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            <RightSidebar>\r\n                <WizardFilter />\r\n            </RightSidebar>\r\n            <GenericSuspense>\r\n                <Outlet />\r\n            </GenericSuspense>\r\n\r\n            {\r\n                deleteItems.length > 0 &&\r\n                <Dialog\r\n                    open={deleteItems.length > 0}\r\n                    onDismiss={() => setDeleteItems([])}\r\n                    onCancel={() => setDeleteItems([])}\r\n                    onConfirm={() => handleDeleteConfirmed()}\r\n                    title={CONFIRMATION}\r\n                    btnOk={{ label: OK, isSubmit: deleteMutation.isLoading }}\r\n                    btnCancel={{ label: CANCEL }}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const WIZARD_LIST_ID = 'Wizard.List'\r\n\r\nconst i18n = [\r\n    'std_add',\r\n    'std_created_at',\r\n    'std_updated_at',\r\n    'std_confirmation',\r\n    'std_ok',\r\n    'std_cancel',\r\n    'Bo.Wizard.title',\r\n    'std_type'\r\n]\r\n\r\nexport default Wizard\r\n", "import { Box, ControlList, useListFilterState, useTranslations } from \"@mzara/component\"\r\nimport _ from \"lodash\"\r\nimport { WIZARD_LIST_ID } from \"../containers/Wizard\"\r\nimport { useWizardListFilter } from \"../hooks/useWizardListFilter\"\r\n\r\nexport const WizardFilter = () => {\r\n\r\n    const control = useWizardListFilter()\r\n    const { filter, setFilter, resetGlobalFilterValue } = useListFilterState(WIZARD_LIST_ID)\r\n    const [\r\n        FILTER,\r\n    ] = useTranslations(i18n)\r\n\r\n    return (\r\n        <Box className=\"box-transparent box-shadow-none box-p-0\" title={FILTER} icon=\"fa-solid fa-filter\">\r\n            <ControlList\r\n                {...control}\r\n                value={{\r\n                    ...filter?.data,\r\n                    tags: !_.isEmpty(filter?.data?.tags.id_among) ? filter?.data?.tags.id_among?.map((item) => ({ id: item })) : undefined,\r\n                }}\r\n                onChange={(value) => setFilter((v: any) => ({ \r\n                    ...v, \r\n                    page: 0, \r\n                    data: { \r\n                        ...v.data, \r\n                        ...value,\r\n                        tags: {\r\n                            id_among: value.tags?.map((item) => item.id)\r\n                        },\r\n                    }\r\n\r\n                }))}\r\n            />\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst i18n = [\r\n    'std_filter'\r\n]\r\n", "import { ControlListProps, useTranslations } from \"@mzara/component\";\r\nimport { useMemo } from \"react\";\r\n\r\nexport const useWizardListFilter = () => {\r\n\r\n    const [\r\n        KEY_LABEL,\r\n        KEY_DESCRIPTION,\r\n        TITLE_LABEL,\r\n        TITLE_DESCRIPTION,\r\n        COMMENT_LABEL,\r\n        COMMENT_DESCRIPTION,\r\n        TAGS_LABEL,\r\n        TAGS_DESCRIPTION,\r\n    ] = useTranslations(i18n);\r\n\r\n    return useMemo((): ControlListProps => {\r\n        return {\r\n            data: {\r\n                forms: [\r\n                    {\r\n                        type: 'text',\r\n                        name: 'wizardKey_like',\r\n                        className: '',\r\n                        label: KEY_LABEL,\r\n                    },\r\n                    {\r\n                        type: 'text',\r\n                        name: 'title_like',\r\n                        className: '',\r\n                        label: TITLE_LABEL,\r\n                    },\r\n                    {\r\n                        type: 'text',\r\n                        name: 'comment_like',\r\n                        className: '',\r\n                        label: COMMENT_LABEL,\r\n                    },\r\n                    {\r\n                        type: 'lov-select',\r\n                        name: 'tags',\r\n                        tp: 'WIZARD_TAGS',\r\n                        multiple: true,\r\n                        className: '',\r\n                        label: TAGS_LABEL,\r\n                    },\r\n                ],\r\n                value: {},\r\n            },\r\n            id: 'wizard-filter-form'\r\n        }\r\n    }, [KEY_LABEL])\r\n}\r\n\r\nconst i18n = [\r\n    'Bo.Wizard.form.key.label',\r\n    'Bo.Wizard.form.key.description',\r\n    'Bo.Wizard.form.title.label',\r\n    'Bo.Wizard.form.title.description',\r\n    'Bo.Wizard.form.comment.label',\r\n    'Bo.Wizard.form.comment.description',\r\n    'Bo.Wizard.form.tags.label',\r\n    'Bo.Wizard.form.tags.description',\r\n]\r\n", "import { SortBarItemProps, useTranslations } from \"@mzara/component\"\r\n\r\nexport const useWizardListSort = (): Array<SortBarItemProps> => {\r\n    const [\r\n        KEY,\r\n        CREATED_AT,\r\n        UPDATED_AT\r\n    ] = useTranslations(i18n)\r\n    return [\r\n        { label: KEY, value: 'wizardKey' },\r\n        { label: CREATED_AT, value: 'createdAt', className:\"ml-auto\" },\r\n        { label: UPDATED_AT, value: 'updatedAt' },\r\n    ]\r\n}\r\n\r\nconst i18n = [\r\n    'Generic.txt.translate.form.ke.label',\r\n    'std_created_at',\r\n    'std_updated_at',\r\n]\r\n", "import { BreadCrumbItemProps, useTranslationRoute, useTranslations } from \"@mzara/component\"\r\n\r\nexport const useWizardBreadCrumb = (): Array<BreadCrumbItemProps> => {\r\n\r\n\tconst [\r\n\t\tHOME,\r\n\t\tTITLE\r\n\t] = useTranslations(i18n)\r\n\tconst url = useTranslationRoute()\r\n\t\r\n    return [\r\n\t\t{\r\n\t\t\tlabel: HOME,\r\n\t\t\tlink: url('')\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: TITLE,\r\n\t\t\tclassName: 'active'\r\n\t\t}\r\n\t]\r\n}\r\n\r\nconst i18n = [\r\n\t'std_home',\r\n\t'Bo.Wizard.title'\r\n]\r\n", "import { TWizard } from \"@mzara/graphql\"\r\nimport { useTranslationRoute, useTranslations, useUrlParamsEncode, useUrlParamsValue } from \"@mzara/component\"\r\nimport { ListRowMenuProps } from \"@mzara/component\"\r\nimport { useMemo } from \"react\"\r\n\r\nexport const useWizardListMenu = () => {\r\n    \r\n    const [\r\n        EDIT,\r\n        DELETE,\r\n        CLONE,\r\n        DESIGNER\r\n    ] = useTranslations(i18n)\r\n    \r\n    const translatedRoute = useTranslationRoute()\r\n    const urlParams = useUrlParamsValue()\r\n    const encodeUrl = useUrlParamsEncode()\r\n\r\n    return useMemo((): Array<ListRowMenuProps> => ([\r\n        {\r\n            ke: 'edit',\r\n            startIcon: 'fa-solid fa-pen',\r\n            label: EDIT,\r\n            linkFn: (row: TWizard) => translatedRoute(`wizard/edit/${row.id}?${encodeUrl(urlParams)}`),\r\n            disabledFn: (row: TWizard) => !row.isEditable,\r\n        },\r\n        {\r\n            ke: 'designer',\r\n            startIcon: 'fa-solid fa-wand-magic-sparkles',\r\n            label: DESIGNER,\r\n            linkFn: (row: TWizard) => translatedRoute(`wizard/designer/${row.id}?${encodeUrl(urlParams)}`),\r\n            disabledFn: (row: TWizard) => !row.isEditable,\r\n        },\r\n        {\r\n            ke: 'delete',\r\n            startIcon: 'fa-solid fa-trash',\r\n            label: DELETE,\r\n            disabledFn: (row: TWizard) => !row.isDeletable,\r\n        }\r\n    ]), [urlParams])\r\n}\r\n\r\nconst i18n = [\r\n    'std_edit',\r\n    'std_delete',\r\n    'std_clone',\r\n    'std_designer'\r\n]\r\n", "import { TWizard, TWizardsResponse } from \"@mzara/graphql\"\r\nimport { GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class WizardsQuery implements GraphQLQueryClass<TWizardsResponse, TResponse> {\r\n    public queryKey: string = 'App.Bo.WizardsQuery'\r\n\r\n    public gql: string = `\r\n        query WizardsQuery(\r\n                $key: String,\r\n                $pageSize: Float, \r\n                $page: Float,\r\n                $sort: [TFilterSort!],\r\n                $data: JSONObject\r\n            ) {\r\n            wizards (filter: {\r\n                key: $key,\r\n                pageSize: $pageSize,\r\n                page: $page,\r\n                sort: $sort,\r\n                data: $data\r\n            }) {\r\n                total\r\n                data {\r\n                    id wizardKey type title comment createdAt updatedAt isEditable isDeletable\r\n                    tags { value color }\r\n                }\r\n            }\r\n        }\r\n    `\r\n\r\n    variables?: any\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponse): TWizardsResponse {\r\n        return {\r\n            total: data.wizards.total,\r\n            data: data.wizards.data\r\n        }\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    wizards: {\r\n        total: number,\r\n        data: Array<TWizard>\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["useUrlParamsValue", "useUrlParamsEncode", "useTranslations", "useTranslationRoute", "useTranslations", "useTranslations", "i18n", "_a", "useTranslations", "i18n", "useTranslations", "i18n", "useTranslationRoute", "useTranslations", "useMemo", "i18n", "jsx", "useTranslations", "i18n", "useTranslationRoute", "useUrlParamsValue", "useUrlParamsEncode"]
}
