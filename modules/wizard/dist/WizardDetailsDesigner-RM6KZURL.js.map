{
  "version": 3,
  "sources": ["../src/view/designer/containers/WizardDetailsDesigner.tsx", "../src/view/designer/components/WizardFlowDesigner.tsx", "../src/view/designer/hooks/useWizardFlowDetailsValue.ts", "../src/view/designer/hooks/useWizardFlowEdgeControl.ts", "../src/view/designer/hooks/useWizardFlowNodeControl.ts", "../src/view/designer/components/WizardSequentialDesigner.tsx"],
  "sourcesContent": ["import { useEffect, useState } from 'react'\r\nimport { ButtonSubmit, useGraphqlMutation, useTranslations } from \"@mzara/component\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useWizardDetailsQuery } from \"hooks/useWizardDetailsQuery\"\r\nimport _ from 'lodash'\r\nimport { WizardFlowDesigner } from '../components/WizardFlowDesigner'\r\nimport { useWizardFlowDetailsValue, WizardDetailsValue } from '../hooks/useWizardFlowDetailsValue'\r\nimport { WizardSequentialDesigner } from '../components/WizardSequentialDesigner'\r\n\r\nconst WizardDetailsDesigner = () => {\r\n\r\n    const [\r\n        SAVE\r\n    ] = useTranslations(i18n)\r\n    const { id } = useParams()\r\n    const { data } = useWizardDetailsQuery(parseInt(id), true)\r\n\r\n    return (\r\n        <div className=\"flex flex-row w-full gap-4 mr-4\">\r\n            <div className=\"flex flex-col gap-5 flex-1\">\r\n                {\r\n                    data.type === 'FLOW' &&\r\n                    <WizardFlowDesigner />\r\n                }\r\n                {\r\n                    data.type === 'SEQUENTIAL' &&\r\n                    <WizardSequentialDesigner />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const WIZARD_MUTATION = `\r\n    mutation SaveWizardDetails ($data: JSONObject) {\r\n        saveWizard (data: { data: $data }) { id }\r\n    }\r\n`\r\n\r\nconst i18n = [\r\n    'std_save'\r\n]\r\n\r\nexport default WizardDetailsDesigner\r\n", "import { Box, ButtonSubmit, useGraphqlMutation, useTranslations } from \"@mzara/component\"\r\nimport { Flow, FlowShellProps } from \"@mzara/flow\"\r\nimport { useWizardDetailsQuery } from \"hooks/useWizardDetailsQuery\"\r\nimport _ from \"lodash\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { WIZARD_MUTATION } from \"../containers/WizardDetailsDesigner\"\r\nimport { useWizardFlowDetailsValue, WizardDetailsValue } from \"../hooks/useWizardFlowDetailsValue\"\r\nimport { useWizardFlowEdgeControl } from \"../hooks/useWizardFlowEdgeControl\"\r\nimport { useWizardFlowNodeControl } from \"../hooks/useWizardFlowNodeControl\"\r\n\r\nexport const WizardFlowDesigner = (props: Props) => {\r\n    const [\r\n        SAVE\r\n    ] = useTranslations(i18n)\r\n    const { id } = useParams()\r\n    const flowNodeControl = useWizardFlowNodeControl()\r\n    const flowEdgeControl = useWizardFlowEdgeControl([])\r\n    const defaultValue = useWizardFlowDetailsValue(parseInt(id), true)\r\n    const [value, setValue] = useState<WizardDetailsValue | Array<number>>()\r\n    const mutation = useGraphqlMutation(WIZARD_MUTATION)\r\n    const { invalidateQuery } = useWizardDetailsQuery(parseInt(id), true)\r\n\r\n    useEffect(() => {\r\n        if (!_.isEqual(defaultValue, value)) {\r\n            setValue(defaultValue)\r\n        }\r\n    }, [defaultValue])\r\n\r\n    const handleSaveClick = () => {\r\n        mutation.mutate({\r\n            data: {\r\n                id: parseInt(id),\r\n                value: JSON.stringify(value)\r\n            }\r\n        }, {\r\n            onSuccess: () => invalidateQuery()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex items-center justify-end\">\r\n                <ButtonSubmit\r\n                    className='btn-primary'\r\n                    startIcon=\"fa-solid fa-save\"\r\n                    label={SAVE}\r\n                    disabled={mutation.isLoading || _.isEqual(defaultValue, value)}\r\n                    onClick={handleSaveClick}\r\n                />\r\n            </div>\r\n            <Box className=\"h-[80vh] p-0\">\r\n                <Flow\r\n                    initialNodes={defaultValue.nodes as any}\r\n                    initialEdges={defaultValue.edges}\r\n                    nodeCustomProperties={flowNodeControl}\r\n                    edgeCustomProperties={flowEdgeControl}\r\n                    onChange={(nodes, edges) => setValue({ nodes, edges })}\r\n                />\r\n            </Box>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nconst i18n = [\r\n    'std_save'\r\n]\r\n\r\ntype Props = {\r\n\r\n}\r\n", "import { FlowDefault, FlowShellProps } from \"@mzara/flow\"\r\nimport { useMemo } from \"react\"\r\nimport { useWizardDetailsQuery } from \"../../../hooks/useWizardDetailsQuery\"\r\n\r\nexport const useWizardFlowDetailsValue = (id?: number, suspense?: boolean) => {\r\n\r\n    const { data } = useWizardDetailsQuery(id, suspense)\r\n\r\n    return useMemo((): WizardDetailsValue => {\r\n        return data.value ? JSON.parse(data.value) : FlowDefault\r\n    }, [data])\r\n}\r\n\r\nexport type WizardDetailsValue = {\r\n    nodes: FlowShellProps['initialNodes']\r\n    edges: FlowShellProps['initialEdges']\r\n}\r\n", "import { useStepControlListCondition } from '@mzara/control-list-designer'\r\n\r\nexport const useWizardFlowEdgeControl = (variables: Array<string>) => {\r\n    const conditionForm = useStepControlListCondition(variables || [])\r\n    return [\r\n        conditionForm\r\n    ]\r\n}\r\n", "import { useMemo } from \"react\"\r\n\r\nexport const useWizardFlowNodeControl = () => {\r\n\r\n    return useMemo(() => {\r\n        return [\r\n            {\r\n                type: 'select',\r\n                name: 'nodeId',\r\n                label: 'Bo.Wizard.Designer.Flow.Edit.FormNode.label',\r\n                GQLConfig: { refetchOnMount: true },\r\n                GQLProps: {\r\n                    gql: `\r\n                        query WizardNodesSelectQuery {\r\n                            wizardNodes {\r\n                                total\r\n                                data {\r\n                                    id title\r\n                                }\r\n                            }\r\n                        }\r\n                    `,\r\n                    labelProp: 'title',\r\n                    valueProp: 'id',\r\n                    rootProp: 'wizardNodes.data'\r\n                }\r\n            },\r\n        ]\r\n    }, [])\r\n}\r\n", "import { Box, Button, ButtonSubmit, ControlList, Dialog, MainLogo, Menu, MenuItemProps, RightSidebar, useGraphqlMutation, useTranslation, useTranslations } from \"@mzara/component\"\r\nimport { ControlListDesigner, ControlListDesignerProperties, useControlListDesignerValueState } from \"@mzara/control-list-designer\"\r\nimport { TWizardNode } from \"@mzara/graphql\"\r\nimport _ from \"lodash\"\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { WIZARD_MUTATION } from \"../containers/WizardDetailsDesigner\"\r\nimport { useWizardNodeValueQuery } from \"../../../hooks/useWizardNodeValueQuery\"\r\nimport { useWizardSequentialDetailsValue } from \"../hooks/useWizardSequentialDetailsValue\"\r\nimport { useWizardNodesMetadataQuery } from \"hooks/useWizardNodesMetadataQuery\"\r\n\r\nexport const WizardSequentialDesigner = (props: WizardSequentialDesignerProps) => {\r\n\r\n    const [\r\n        NEW,\r\n        SAVE,\r\n        CONFIRMATION,\r\n        OK,\r\n        CANCEL\r\n    ] = useTranslations(i18n)\r\n    const t = useTranslation()\r\n    const { id } = useParams()\r\n    const [active, setActive] = useState<number>()\r\n    const nodeIds = useWizardSequentialDetailsValue(parseInt(id), true)\r\n    const [value, setValue] = useState(nodeIds)\r\n    const { data: wizards, isLoading: isWizardsloading, invalidateQuery: invalidateWizardQuery } = useWizardNodesMetadataQuery(value)\r\n    const { data: wizardNodeDefaultValue, isLoading: isWizardNodeLoading, invalidateQuery: invalidateWizardNodeQuery } = useWizardNodeValueQuery(active)\r\n    \r\n    const wizardMutation = useGraphqlMutation(WIZARD_MUTATION)\r\n    const wizardNodeMutation = useGraphqlMutation<TWizardNode>(WIZARD_NODE_MUTATION)\r\n    const [nodeValue] = useControlListDesignerValueState(active?.toString())\r\n    const [removeDialog, setRemoveDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!active) {\r\n            setActive(wizards?.[0]?.id)\r\n        }\r\n    }, [wizards])\r\n\r\n    const menus = useMemo((): Array<MenuItemProps> => {\r\n        return [\r\n            ...(wizards || [])?.map((item) => ({\r\n                label: t(item.valueTitle as any),\r\n                value: item.id\r\n            })),\r\n            {\r\n                label: NEW,\r\n                startIcon: 'fa-solid fa-plus',\r\n                value: -1\r\n            }\r\n        ]\r\n    }, [wizards])\r\n\r\n    const handleMenuClick = useCallback((item: MenuItemProps) => {\r\n        setActive(item.value)\r\n    }, [])\r\n\r\n    const handleBeforeSubmit = useCallback((value: Record<string, any>) => {\r\n        if (value.createNew !== true) {\r\n            setValue((v) => [...v, value.nodeId])\r\n            setActive(value.nodeId)\r\n            return false\r\n        }\r\n        return value\r\n    }, [])\r\n\r\n    const handleSubmited = useCallback((value: any) => {\r\n        setValue((v) => [...v, value.saveWizardNode.id])\r\n        setActive(value.saveWizardNode.id)\r\n    }, [])\r\n\r\n    \r\n    const handleSaveClick = () => {\r\n        wizardMutation.mutate({\r\n            data: {\r\n                id: parseInt(id),\r\n                value: JSON.stringify(value)\r\n            }\r\n        }, {\r\n            onSuccess: () => invalidateWizardQuery()\r\n        })\r\n        wizardNodeMutation.mutate({\r\n            data: {\r\n                id: active,\r\n                value: JSON.stringify(nodeValue)\r\n            }\r\n        }, {\r\n            onSuccess: () => invalidateWizardNodeQuery()\r\n        })\r\n    }\r\n\r\n    const handleRemoveConfirm = useCallback(() => {\r\n        setValue((v) => v.filter((item) => item !== active))\r\n        setActive(undefined)\r\n        setRemoveDialog(false)\r\n    }, [active])\r\n\r\n    const isWizardDirty = useMemo(() => {\r\n        return !_.isEqual(value, nodeIds)\r\n    }, [value, nodeIds])\r\n\r\n    const isWizardNodeDirty = useMemo(() => {\r\n        return !_.isEqual(_.omitBy(nodeValue, _.isNil), wizardNodeDefaultValue)\r\n    }, [nodeValue, wizardNodeDefaultValue])\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"flex items-center justify-end\">\r\n                <Button startIcon=\"fa-solid fa-times\" label=\"Retirer la formulaire\" onClick={() => setRemoveDialog(true)} />\r\n                <ButtonSubmit\r\n                    className='btn-primary'\r\n                    startIcon=\"fa-solid fa-save\"\r\n                    label={SAVE}\r\n                    disabled={(!isWizardDirty && !isWizardNodeDirty)}\r\n                    isSubmit={wizardMutation.isLoading || wizardNodeMutation.isLoading}\r\n                    onClick={handleSaveClick}\r\n                />\r\n            </div>\r\n            <div className=\"flex gap-5\">\r\n                <div>\r\n                    <Box className=\"w-60 p-0\">\r\n                        <Menu\r\n                            items={menus}\r\n                            activeFn={(menu) => menu.value === active}\r\n                            onClick={handleMenuClick}\r\n                        />\r\n                    </Box>\r\n                </div>\r\n                <div className=\"flex flex-col gap-5 flex-1\">\r\n                    {\r\n                        !isWizardNodeLoading &&\r\n                        <>\r\n                            <div className=\"max-w-xl w-full m-auto\">\r\n                                <ControlListDesigner id={active?.toString()} defaultValue={wizardNodeDefaultValue} />\r\n                            </div>\r\n\r\n                            <RightSidebar className=\"right-sidebar-absolute\">\r\n                                <ControlListDesignerProperties id={active?.toString()} />\r\n                            </RightSidebar>\r\n                        </>\r\n                    }\r\n                    {\r\n                        (isWizardsloading || isWizardNodeLoading) &&\r\n                        <MainLogo />\r\n                    }\r\n                </div>\r\n\r\n                {\r\n                    active === -1 &&\r\n                    <Dialog\r\n                        open={active === -1}\r\n                        onClose={() => setActive(wizards[0]?.id)}>\r\n                        <ControlList\r\n                            data={{ forms: [] }}\r\n                            nodeKey=\"Generic.Wizard.Designer.Sequential.Import.Form\"\r\n                            onBeforeSaving={handleBeforeSubmit}\r\n                            onSubmited={handleSubmited}\r\n                        />\r\n                    </Dialog>\r\n                }\r\n\r\n                {\r\n                    removeDialog &&\r\n                    <Dialog\r\n                        open={removeDialog}\r\n                        title={CONFIRMATION}\r\n                        btnOk={{ label: OK }}\r\n                        btnCancel={{ label: CANCEL }}\r\n                        onConfirm={handleRemoveConfirm}\r\n                        onCancel={() => setRemoveDialog(false)}\r\n                        onClose={() => setRemoveDialog(false)}\r\n                        />\r\n                }\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport const WIZARD_NODE_MUTATION = `\r\nmutation ($data: JSONObject) {\r\n    saveWizardNode (data: { data: $data }){ id }\r\n}\r\n`\r\n\r\nexport type WizardSequentialDesignerProps = {\r\n    \r\n}\r\n\r\nconst i18n = [\r\n    'std_new',\r\n    'std_save',\r\n    'std_confirmation',\r\n    'std_ok',\r\n    'std_cancel'\r\n]\r\n\r\n"],
  "mappings": "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",
  "names": ["useTranslations", "useParams", "useMemo", "Box", "ButtonSubmit", "useGraphqlMutation", "useTranslations", "_", "useEffect", "useMemo", "useState", "useParams", "Fragment", "jsx", "jsxs", "useTranslations", "i18n", "useParams", "useState", "useGraphqlMutation", "useEffect", "useMemo", "value", "_", "ButtonSubmit", "Box", "jsx", "jsxs", "useTranslations", "i18n", "useParams"]
}
