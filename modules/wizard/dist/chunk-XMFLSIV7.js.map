{
  "version": 3,
  "sources": ["../src/hooks/useWizardNodeValueQuery.ts", "../src/queries/WizardNodeValueQuery.ts", "../src/view/designer/hooks/useWizardSequentialDetailsValue.ts", "../src/hooks/useWizardNodesMetadataQuery.ts", "../src/queries/WizardNodesMetadataQuery.ts"],
  "sourcesContent": ["import { ControlListProps, useGraphqlQuery } from \"@mzara/component\"\r\nimport { WizardNodeValueQuery } from \"../queries/WizardNodeValueQuery\"\r\n\r\nexport const useWizardNodeValueQuery = (id?: number, suspense?: boolean) => {\r\n    return useGraphqlQuery<WizardNodeValueQuery, ControlListProps>(new WizardNodeValueQuery({ id }), { enabled: id !== undefined && id !== -1, suspense })\r\n}\r\n", "import { TWizardNode } from \"@mzara/graphql\"\r\nimport { ControlListProps, GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class WizardNodeValueQuery implements GraphQLQueryClass<ControlListProps, TResponse> {\r\n    public queryKey: string = 'App.Bo.WizardNodesValueQuery'\r\n\r\n    public gql: string = `\r\n        query WizardNodesValueQuery($id: Float) {\r\n            wizardNode (filter: { id: $id }) { value }\r\n        }\r\n    `\r\n\r\n    variables?: any\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponse): ControlListProps {\r\n        return JSON.parse(data.wizardNode.value || '{}')\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    wizardNode: TWizardNode\r\n}\r\n", "import { ControlListProps } from \"@mzara/component\"\r\nimport { FlowDefault, FlowShellProps } from \"@mzara/flow\"\r\nimport { useMemo } from \"react\"\r\nimport { useWizardDetailsQuery } from \"../../../hooks/useWizardDetailsQuery\"\r\n\r\nexport const useWizardSequentialDetailsValue = (id?: number, suspense?: boolean) => {\r\n\r\n    const { data } = useWizardDetailsQuery(id, suspense)\r\n\r\n    return useMemo((): Array<number> => {\r\n        return data.value ? JSON.parse(data.value) : []\r\n    }, [data])\r\n}\r\n\r\n", "import { useGraphqlQuery } from \"@mzara/component\"\r\nimport { TWizardNode } from \"@mzara/graphql\"\r\nimport { WizardNodesMetadataQuery } from \"queries/WizardNodesMetadataQuery\"\r\n\r\nexport const useWizardNodesMetadataQuery = (ids?: Array<number>, suspense?: boolean) => {\r\n    return useGraphqlQuery<WizardNodesMetadataQuery, Array<TWizardNode>>(new WizardNodesMetadataQuery({ ids }), { enabled: ids !== undefined, suspense })\r\n}\r\n", "import { TWizardNode } from \"@mzara/graphql\"\r\nimport { GraphQLQueryClass } from \"@mzara/component\"\r\n\r\nexport class WizardNodesMetadataQuery implements GraphQLQueryClass<Array<TWizardNode>, TResponse> {\r\n    public queryKey: string = 'App.Bo.WizardNodesMetadataQuery'\r\n\r\n    public gql: string = `\r\n        query WizardNodesMetadataQuery($ids: [Float]) {\r\n            wizardNodes (filter: {\r\n                data: {\r\n                    id_among: $ids\r\n                }\r\n            }) {\r\n                total\r\n                data {\r\n                    id nodeKey valueTitle\r\n                }\r\n            }\r\n        }\r\n    `\r\n\r\n    variables?: any\r\n\r\n    constructor(variables?: any) {\r\n        this.variables = variables\r\n    }\r\n\r\n    mapFn(data: TResponse): Array<TWizardNode> {\r\n        return data.wizardNodes.data\r\n    }\r\n}\r\n\r\nexport type TResponse = {\r\n    wizardNodes: {\r\n        total: number,\r\n        data: Array<TWizardNode>\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;AAAA,SAA2B,uBAAuB;;;ACG3C,IAAM,uBAAN,MAAqF;AAAA,EAWxF,YAAY,WAAiB;AAV7B,SAAO,WAAmB;AAE1B,SAAO,MAAc;AAAA;AAAA;AAAA;AAAA;AASjB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,MAAM,MAAmC;AACrC,WAAO,KAAK,MAAM,KAAK,WAAW,SAAS,IAAI;AAAA,EACnD;AACJ;;;ADlBO,IAAM,0BAA0B,CAAC,IAAa,aAAuB;AACxE,SAAO,gBAAwD,IAAI,qBAAqB,EAAE,GAAG,CAAC,GAAG,EAAE,SAAS,OAAO,UAAa,OAAO,IAAI,SAAS,CAAC;AACzJ;;;AEHA,SAAS,eAAe;AAGjB,IAAM,kCAAkC,CAAC,IAAa,aAAuB;AAEhF,QAAM,EAAE,KAAK,IAAI,sBAAsB,IAAI,QAAQ;AAEnD,SAAO,QAAQ,MAAqB;AAChC,WAAO,KAAK,QAAQ,KAAK,MAAM,KAAK,KAAK,IAAI,CAAC;AAAA,EAClD,GAAG,CAAC,IAAI,CAAC;AACb;;;ACZA,SAAS,mBAAAA,wBAAuB;;;ACGzB,IAAM,2BAAN,MAA2F;AAAA,EAoB9F,YAAY,WAAiB;AAnB7B,SAAO,WAAmB;AAE1B,SAAO,MAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBjB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,MAAM,MAAqC;AACvC,WAAO,KAAK,YAAY;AAAA,EAC5B;AACJ;;;AD1BO,IAAM,8BAA8B,CAAC,KAAqB,aAAuB;AACpF,SAAOC,iBAA8D,IAAI,yBAAyB,EAAE,IAAI,CAAC,GAAG,EAAE,SAAS,QAAQ,QAAW,SAAS,CAAC;AACxJ;",
  "names": ["useGraphqlQuery", "useGraphqlQuery"]
}
